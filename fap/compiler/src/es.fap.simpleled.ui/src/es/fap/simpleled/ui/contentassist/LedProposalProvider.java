/*
 * generated by Xtext
 */
package es.fap.simpleled.ui.contentassist;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.jface.text.BadLocationException;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.jface.viewers.StyledString.Styler;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.TextStyle;
import org.eclipse.swt.widgets.Display;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import com.google.inject.Inject;

import es.fap.simpleled.led.*;
import es.fap.simpleled.led.impl.LedFactoryImpl;
import es.fap.simpleled.led.util.LedCampoUtils;
import es.fap.simpleled.led.util.LedEntidadUtils;
import es.fap.simpleled.led.util.Proposal;
import es.fap.simpleled.validation.*;

/**
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on
 * how to customize content assistant
 */
public class LedProposalProvider extends AbstractLedProposalProvider {

	@Inject
	IScopeProvider scopeProvider;
	
	public int getCurrentLine(ContentAssistContext context){
		try {
			return context.getViewer().getDocument().getLineOfOffset(context.getOffset()) + 1;
		} catch (BadLocationException e) {
			return 0;
		}
	}
	
	@Override
	public void completeKeyword(Keyword keyword, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		String value = keyword.getValue();
		if (value.equals(".") || value.equals("agente") || value.equals(context.getPrefix())){
			return;
		}
		if (value.equals("(") || value.equals(")") || value.equals("!")){
			acceptor.accept(createCompletionProposal(value, context));
			return;
		}
		if (value.equals("action")){
			acceptor.accept(createCompletionProposal(value, styledProposal(value + "  -  " + "(read, edit, delete, create)", null), null, context));
			return;
		}
		char first = value.charAt(0);
		EObject semantic = context.getCurrentModel();
		String lastKeyword = "";
		if (context.getLastCompleteNode().getGrammarElement() instanceof Keyword){
			lastKeyword = ((Keyword)context.getLastCompleteNode().getGrammarElement()).getValue();
		}
		if (value.equals("}") || (Character.isLetter(first) && first == Character.toUpperCase(first) && !lastKeyword.equals("<"))){
			if (getCurrentLine(context) == context.getLastCompleteNode().getStartLine()){
				return;
			}
		}
		if (Character.isLetter(first) && first != Character.toUpperCase(first)){
			if (getCurrentLine(context) != context.getLastCompleteNode().getStartLine() && !(semantic instanceof Tabla)){
				return;
			}
		}
		super.completeKeyword(keyword, context, acceptor);
	}
	
	@Override
	public void completeCompoundType_Entidad(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		INode node = context.getLastCompleteNode();
		if (getCurrentLine(context) == node.getStartLine() && !(node.getSemanticElement().eContainer() instanceof CompoundType)){
			return;
		}
		Set<Entity> entidades = getEntidades(model);
		for (Entity entidad: entidades){
			acceptor.accept(createCompletionProposal(entidad.getName(), styledProposal(entidad.getName() + "  -  " + "Entidad", null), null, 0, context.getPrefix(), context));
		}
	}
	
	@Override
	public void completeCampo_Entidad(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		Campo campo = LedCampoUtils.getCampo(model);
		LedElementValidator validator = LedCampoUtils.getElementValidator(campo);
		if (validator != null) {
			for (Proposal proposal: validator.completeEntidades(getEntidadesCampo(campo))) {
				acceptor.accept(createCompletionProposal(proposal.getEditorText(), styledProposal(proposal.text, proposal.valid), null, proposal.priority, context.getPrefix(), context));
			}
		}
		else{
			super.completeCampo_Entidad(model, assignment, context, acceptor);
		}
	}
	
	@Override
	public void completeCampoAtributos_Atributo(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor){
		CampoAtributos atributos = (CampoAtributos) model;
		Campo campo = LedCampoUtils.getCampoContainer(atributos);
		Entity entidad = null;
		if (atributos.eContainer() instanceof Campo){
			entidad = ((Campo) atributos.eContainer()).getEntidad();
		}
		else{
			Attribute attr = ((CampoAtributos)atributos.eContainer()).getAtributo();
			if (LedEntidadUtils.xToOne(attr)){
				entidad = LedEntidadUtils.getEntidad(attr);
			}
		}
		if (entidad == null){
			return;
		}
		LedElementValidator validator = LedCampoUtils.getElementValidator(campo);
		if (validator != null){
			for (Proposal proposal: validator.completeEntidad("", entidad)) {
				acceptor.accept(createCompletionProposal(proposal.getEditorText(), styledProposal(proposal.text, proposal.valid), null, context));
			}
		}
		else{
			super.completeCampoAtributos_Atributo(atributos, assignment, context, acceptor);
		}
	}

	@Override
	public void completeCampoPermiso_Variable(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor){
	}
	
	@Override
	public void completeCampoPermiso_Action(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor){
	}
	
	@Override
	public void completeCampoPermiso_Agente(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor){
	}
	
	@Override
	public void complete_CampoPermiso(EObject model, RuleCall call, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		CampoPermisoValidator validator = new CampoPermisoValidator();
		for (Proposal proposal: validator.completeVariables(getPermisoVariables(model))) {
			acceptor.accept(createCompletionProposal(proposal.getEditorText(), styledProposal(proposal.text, proposal.valid), null, context));
		}
	}
	
	@Override
	public void completeCampoPermisoAtributos_Atributo(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor){
		CampoPermisoAtributos atributos = (CampoPermisoAtributos) model;
		Entity entidad = null;
		if (atributos.eContainer() instanceof CampoPermiso){
			CampoPermiso perm = (CampoPermiso) atributos.eContainer();
			if (perm.isAction()){
				return;
			}
			if (perm.isAgente()){
				entidad = getAgente(model);
			}
			else{
				entidad = perm.getVariable().getTipo();
			}
		}
		else{
			Attribute attr = ((CampoPermisoAtributos)atributos.eContainer()).getAtributo();
			if (LedEntidadUtils.xToOne(attr)){
				entidad = LedEntidadUtils.getEntidad(attr);
			}
		}
		if (entidad == null){
			return;
		}
		CampoPermisoValidator validator = new CampoPermisoValidator();
		for (Proposal proposal: validator.completeEntidad("", entidad)) {
			acceptor.accept(createCompletionProposal(proposal.getEditorText(), styledProposal(proposal.text, proposal.valid), null, context));
		}
	}
	
	@Override
	public void completePermisoRuleCheck_Permiso(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor){
		for (IEObjectDescription desc : scopeProvider.getScope(model, LedPackage.Literals.PERMISO_RULE_CHECK__PERMISO).getAllElements()) {
			Permiso perm = (Permiso) desc.getEObjectOrProxy();
			if (perm.eIsProxy()) {
				perm = (Permiso) EcoreUtil.resolve(perm, model.eResource());
			}
			acceptor.accept(createCompletionProposal(perm.getName(), styledProposal(perm.getName() + "  -  " + "Permiso", null), null, 0, context.getPrefix(), context));
		}
	}
	
	public List<PermisoVar> getPermisoVariables(EObject model) {
		List<PermisoVar> variables = new ArrayList<PermisoVar>();
		while (! (model instanceof Permiso)){
			model = model.eContainer();
		}
		Permiso perm = (Permiso) model;
		if (perm.getVarSection() != null){
			variables.addAll(perm.getVarSection().getVars());
		}
		Entity agente = getAgente(model);
		PermisoVar agenteVar = new LedFactoryImpl().createPermisoVar();
		agenteVar.setName("agente");
		agenteVar.setTipo(agente);
		variables.add(agenteVar);
		return variables;
	}
	
	public Set<Entity> getEntidadesCampo(Campo campo) {
		Set<Entity> entidades = new HashSet<Entity>();
		EObject container = LedCampoUtils.getElementosContainer(campo);
		if (!(container instanceof Tabla)){
			entidades.addAll(getSingletons(campo));
		}
		Campo campoContainer = LedCampoUtils.getCampo(container);
		if (container instanceof Form && campoContainer == null){
			while (!(container instanceof Pagina)){
				container = container.eContainer();
			}
		}
		if (container instanceof Tabla || container instanceof Popup || container instanceof Form){
			entidades.add(LedCampoUtils.getUltimaEntidad(campoContainer));
		}
		else if (container instanceof Pagina){
			Entity entidad = LedEntidadUtils.getEntidad((Pagina)container);
			if (entidad != null){
				entidades.add(entidad);
			}
		}
		return entidades;
	}
	
	public Set<Entity> getSingletons(EObject object) {
		Set<Entity> singletons = new HashSet<Entity>();
		for (IEObjectDescription desc : scopeProvider.getScope(object, LedPackage.Literals.CAMPO__ENTIDAD).getAllElements()) {
			Entity entidad = (Entity) desc.getEObjectOrProxy();
			if (entidad.eIsProxy()) {
				entidad = (Entity) EcoreUtil.resolve(entidad, object.eResource());
			}
			if (LedEntidadUtils.esSingleton(entidad)){
				singletons.add(entidad);
			}
		}
		return singletons;
	}
	
	public Set<Entity> getEntidades(EObject object) {
		Set<Entity> entidades = new HashSet<Entity>();
//		Set<Entity> referenciadas = new HashSet<Entity>();
		Entity solicitud = null;
		Entity solicitudGenerica = null;
//		for (IEObjectDescription desc : descriptions.getExportedObjectsByType(LedPackage.Literals.ENTITY)) {
		for (IEObjectDescription desc : scopeProvider.getScope(object, LedPackage.Literals.CAMPO__ENTIDAD).getAllElements()) {
			Entity entidad = (Entity) desc.getEObjectOrProxy();
			if (entidad.eIsProxy()) {
				entidad = (Entity) EcoreUtil.resolve(entidad, object.eResource());
			}
//			for (Attribute attr: getAllDirectAttributes(entidad)){
//				Entity ref = getEntity(attr);
//				if (ref != null){
//					referenciadas.add(ref);
//				}
//			}
			if (entidad.getName().equals("SolicitudGenerica")) {
				solicitudGenerica = entidad;
			} else {
				entidades.add(entidad);
				if (entidad.getName().equals("Solicitud")) {
					solicitud = entidad;
				}
			}
		}
		if (solicitud == null && solicitudGenerica != null) {
			entidades.add(solicitudGenerica);
		}
//		entidades.removeAll(referenciadas);
		return entidades;
	}
	
	private static Color color = new Color(Display.getCurrent(), 127, 127, 127);
	private static Color acceptedColor = new Color(Display.getCurrent(), 0, 120, 0);
	private static Color noAcceptedColor = new Color(Display.getCurrent(), 120, 0, 0);
	
	
	private static Styler styler = new Styler() {
		
		@Override
		public void applyStyles(TextStyle arg0) {
			arg0.foreground = color;
		}
	};
	
	private static Styler acceptedStyler = new Styler() {
		
		@Override
		public void applyStyles(TextStyle arg0) {
			arg0.foreground = acceptedColor;
		}
	};
	
	private static Styler noAcceptedStyler = new Styler() {
		
		@Override
		public void applyStyles(TextStyle arg0) {
			arg0.foreground = noAcceptedColor;
		}
	};
	
	private StyledString styledProposal(String proposal, Boolean accepted){
		StyledString styled = new StyledString(proposal);
		int index = proposal.indexOf("-");
		if (accepted != null){
			if (accepted){
				styled.setStyle(0, index, acceptedStyler);
			}
			else{
				styled.setStyle(0, index, noAcceptedStyler);
			}
		}
		styled.setStyle(index, proposal.length() - index, styler);
		return styled;
	}
	
	public Entity getAgente(EObject object) {
		for (IEObjectDescription desc : scopeProvider.getScope(object, LedPackage.Literals.CAMPO__ENTIDAD).getAllElements()) {
			Entity entidad = (Entity) desc.getEObjectOrProxy();
			if (entidad.eIsProxy()) {
				entidad = (Entity) EcoreUtil.resolve(entidad, object.eResource());
			}
			if (entidad.getName().equals("Agente")) {
				return entidad;
			}
		}
		return null;
	}
	
}
