h1. Utilizando permisos

En nuestra aplicación,...

* ¿Todas las partes de la aplicación son vistas por todos los usuarios? 
* ¿Qué pasa si necesitamos que en la aplicación algunos usuarios puedan ver o efectuar cosas que otros no? 
* ¿Se puede hacer esto en una aplicación FAP? 

La respuesta es sí. Para ello existen los *permisos*, los cuales se declaran mediante la siguiente sintaxis:

bc. 'Permiso' name{
	'vars'
		variables
	'when'
		condiciones
	'return'
		permisoReturn
	'when'
		condiciones
	'return'
		permisoReturn
	...
}

**_Nota:_** Pueden colocarse tantas cláusulas when-return como sean necesarias.

h3. Cláusula Vars

La sección *vars* permite declarar variables que serán utilizadas en la sección *condiciones*, donde se utilizarán expresiones para realizar el cálculo de permisos. Existen variables por defecto, las cuales no hará falta declarar (_agente_ y ___accion__).

h3. Cláusula When

La sección *when* contiene el conjunto de condiciones que se van a comprobar a la hora de consultar un permiso. Pueden existir múltiples secciones _when_ dentro de un permiso. Si al comprobar una de ellas, se cumplen todas las condiciones, entonces no se siguen comprobando las demás que estén a continuación.

Los permisos se podrán aplicar a páginas, popups, grupos, forms, tablas, y al menú (tanto grupos como elementos individuales). Cuando se comprueba un permiso se le consulta para una acción y para un modo concretos. 

Para consultar por una acción en concreto es necesario utilizar la variable predefinida ___accion__. Las posibles acciones son:

* **leer** : permitir la navegación a páginas y popups cuando la acción es __leer__. Esta acción permite únicamente visualizar el contenido.
* **crear** : permitir la navegación a páginas y popups cuando la acción es __crear__. Esta acción incluye un botón para crear en base de datos una entidad con los datos suministrados en el formulario.
* **editar** : permitir la navegación a páginas y popups cuando la acción es __editar__. Esta acción incluye un botón para editar una entidad ya existente a partir de los datos suministrados en el formulario.
* **borrar** : permitir la navegación a páginas y popups cuando la acción es __borrar__. Esta acción incluye un botón para borrar de base de datos la entidad que se está visualizando en el formulario.

h3. Cláusula Return

La sección *return* establece lo que el permiso va a devolver cuando se cumplan las condiciones que están justo encima. Debe tenerse en cuenta, que el permiso puede considerarse que está dividido en dos partes:
* _**Permiso de Acción**_: Indica que acciones pueden realizarse sobre las entidades utilizadas en la sección donde el permiso es efectivo (_all / crear / editar / borrar / leer_).
* _**Permiso de Gráfico**_: Indica que acciones pueden realizarse sobre los elementos gráficos que están actuado en la sección donde el permiso es efectivo (_editable / visible / oculto_). Si no se especifica, depende de la acción con la que consultemos el permiso y no es aplicable al _Permiso de Acción_ denegar.

A continuación, se explica en que consiste cada _Permiso de Acción_:

* **all**: Permite las operaciones de crear, editar, borrar y leer sobre los elementos en los que está actuando el permiso.
* **crear**: Permite las operación de crear y leer sobre los elementos en los que está actuando el permiso.
* **editar**: Permite las operaciones de leer y editar sobre los elementos en los que está actuando el permiso.
* **leer**: Permite la operacion de leer sobre los elementos en los que está actuando el permiso.
* **borrar**: Permite la operaccion de borrar sobre los elementos en los que está actuando el permiso.
* **denegar**: No permite realizar ninguna operación sobre los elementos en los que está actuando el permiso.

A continuación, se explica en que consiste cada _Permiso de Gráfico_:

* **editable** : permite que todos los controles gráficos web sobre los que está actuando el permiso sean visibles y editables.
* **visible** : permite que todos los controles gráficos web sobre los que está actuando el permiso sean visibles, pero no editables.
* **oculto** : deshabilita el renderizado de todos los controles gráficos web sobre los que está actuando el permiso.

Si se está consultando con permiso igual a _editable_ y el permiso define _return editable_, el método del permiso devolverá _true_. Si por el contrario el permiso define _return visible_ o _return none_, devolverá _false_. La jerarquía de permisos es la siguiente:

bc. Editable > Visible > None

_Permiso de Acción_ y _Permiso de Gráfico_, pueden emplearse tanto juntos como por separado en la declaración del *return* siempre que se siga la sintaxis definida en la regla PermisoReturn que se muestra a continuación:


bc. PermisoReturn:
	'denegar' | 
	permisoGrafico | 
	permisoAccion |
	permisoAccion ':' permisoGrafico
;

h4. Empleando _Permiso de Acción_ y _Permiso de Gráfico_:

bc. Permiso permisoAccionGrafico{
	vars
		SolicitudGenerica solicitud
	when 
		solicitud.mientidad.campo1 = "true"
	return
		all:editable
}

En este ejemplo, se indica que cuando solicitud.mientidad.campo1 sea true, permitirá realizar cualquier accion de crear, editar, leer o borrar sobre los elementos en los que actúa el permiso y, que todos los elementos gráficos web sean editables y visibles.

h4. Empleando _Permiso de Acción_:

bc. Permiso permisoAccion{
	vars
		SolicitudGenerica solicitud
	when 
		solicitud.mientidad.campo1 = "true" 
	return
		editar
}

En este ejemplo, se indica que cuando solicitud.mientidad.campo1 sea true, permitirá realizar operaciones de editar y leer sobre los elementos en los que actúa el permiso.

h4. Empleando _Permiso de Gráfico_:

bc. Permiso permisoGrafico{
	vars
		SolicitudGenerica solicitud
	when 
		solicitud.mientidad.campo1 = "true" 
	return
		editable
}

En este ejemplo, se indica que que cuando solicitud.mientidad.campo1 sea true, permitirá que todos los elemetos gráficos web sean editables y visibles.


Los permisos son mucho más potentes que lo que hemos explicado aquí, pudiendo referirnos a las entidades utilizadas en la aplicación, utilizar variables a partir de una consulta SQL, referirnos dentro de un permiso a otro, etc. Más información sobre los mismos "aquí":dsl-permisos.

h2. Ejemplo práctico uno

En el siguiente ejemplo se mostrará la definición DSL de 3 permisos y su utilización en una página en la que habrá:
*	Un primer grupo que es visible y podrá ser editado tanto por el _usuario_ como por el _administrador_.
*	Un segundo grupo en el cual el _administrador_ tendrá permisos de edición y el _usuario_ solo de lectura.
*	Un último grupo que solo puede ser visto y editado por el _administrador_.

Dependiendo de que rol activo tenga el usuario tendremos ciertos permisos o no.

El usuario con rol activo _*administrador*_ debe ver esto:
 
 !images/ejem_permisos1!
 
 El usuario con rol activo _*usuario*_ debe ver esto otro:
 
 !images/ejem_permisos2!
 
 Para conseguir que el primer grupo sea visible y editable tanto para el _*usuario*_ como para el _*administrador*_ declaramos un permiso como el siguiente:

bc. Permiso adminOrUsuario{
	when
		agente.rolActivo in ("administrador", "usuario")
	return all
}

!images/diagrama-permiso-adminOrUsuario!

Si le aplicamos dicho permiso al grupo, tal que así:

bc. Grupo titulo="Grupo que pueden ver y editar roles de administrador y usuario" permiso=adminOrUsuario{
		Texto campo=Solicitud.sol.nombre titulo="Nombre"
	}

Tanto el _*usuario*_ como el _*administrador*_ podrán ver y editar el texto de este grupo:

!images/ejem_permisos3! 

!images/ejem_permisos4! 


Para conseguir que el segundo grupo sea visible y editable para el administrador y *solo* visible para el usuario declaramos el siguiente permiso:

bc. Permiso adminOrUsuario2{
	when
		agente.rolActivo in ("administrador")
	return all:editable
	when
		agente.rolActivo in ("usuario")
	return visible
}

!images/diagrama-permiso-adminorUsuario2!

Ahora le ponemos el permiso al grupo en cuestión:

bc. 		Grupo titulo="Grupo que puede editar y ver el administrador y solo ver el usuario" permiso=adminOrUsuario2{
			Combo campo=Solicitud.comboTest.paises titulo="Combo de países"
		}

Ahora vemos como el _*administrador*_ puede ver y editar:

!images/ejem_permisos5! 

Por el contrario el usuario podrá ver pero no editar:

!images/ejem_permisos6! 

Por último necesitamos un permiso para que el tercer grupo sea solo visible y editable por el administrador:

bc. Permiso administrador{
	when
		agente.rolActivo = "administrador"
	return all
}

 !images/diagrama-permiso-administrador!

Finalmente le aplicamos este permiso al tercer grupo, tal que así:

bc. Grupo titulo="Grupo con persmisos solo para el administrador" permiso=administrador{
		Boton botonej titulo="Botón"
	}


Ahora el _*administrador*_ podrá ver y ejecutar la acción del botón del grupo 3:

!images/ejem_permisos7!

mientras que el _*usuario*_ ni siquiera podrá ver el grupo.

!images/ejem_permisos8!

A continuación mostramos el código total, con todos los grupos y sus respectivos permisos:

bc. Pagina Ejemplo campo=Solicitud{
		Grupo titulo="Grupo que pueden ver y editar roles de administrador y usuario" permiso=adminOrUsuario{
			Texto campo=Solicitud.sol.nombre titulo="Nombre"
		}
		
		Grupo titulo="Grupo que puede editar y ver el administrador y solo ver el usuario" permiso=adminOrUsuario2{
			Combo campo=Solicitud.comboTest.paises titulo="Combo de países"
		}
		
		Grupo titulo="Grupo con persmisos solo para el administrador" permiso=administrador{
			Boton botonej titulo="Botón"
		}
}

h2. Ejemplo práctico 2

En el siguiente ejemplo se mostrará la definición DSL de dos permisos y su utilización en una página, para demostrar su uso y visualizar el resultado en la web.

bc. Permiso ejemplo1 {
	when _accion = crear
	return none
	else return editable
}

bc. Permiso ejemplo2 {
	when _accion = editar
	return visible
	else return editable
}

bc.. Pagina PaginaEj campo=Document {
		
	Grupo permiso=ejemplo1 borde=false {
		Tabla tabla1 campo=Document.valores columnasAutomaticas{}
	}
		
	Grupo permiso=ejemplo2 borde=false {
		Texto campo=Document.nombre
	}

	Texto campo=Document.Descripcion
}

p. En la página expuesta existen tres elementos diferenciados:
* En primer lugar, se define una tabla que está restringida por el permiso _ejemplo1_. Dicho permiso establece que cuando la acción es crear no permite ni visible ni editable. En caso contrario permite ambas cosas.

* A continuación, se define un campo de texto restringido con el permiso _ejemplo2_. En este caso, el permiso establece que cuando la acción es editar solo permite visible. En caso contrario lo permite todo (editable).

* Por último, se define otro campo de texto, pero que en este caso no está restringido por ningún permiso.

A continuación, se muestra el resultado visual de dicha página, en dos casos distintos: cuando la acción es crear y cuando la acción es editar.

Cuando la acción es *crear* :

!images/curso_permisos_crear!

Se observa como efectivamente la tabla no es visible, ya que no ha sido renderizada.

Cuando la acción es *editar* :

!images/curso_permisos_editar!

En este caso la tabla si aparece, pero el campo de texto que se encuentra a continuación no es editable, solo visible.