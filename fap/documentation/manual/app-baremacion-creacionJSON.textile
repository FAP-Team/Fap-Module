h1. Creación del fichero JSON asociado

El nicho de información principal para la generación de toda la parte de baremación en nuestra aplicación es una serie de ficheros JSON que indican los campos, atributos, criterios y demás formalismos que contiene una baremación en especial.

Estos ficheros están pensados para que sea la respuesta de una petición a un servicio web propio, en un futuro, para crear la Baremación de la aplicación. En estos momentos eso no está totalmente desarrollado, por lo que de momento los ficheros JSON se deben generar a mano, simulando la respuesta del servicio web, para que la aplicación los pueda leer y parsear, y así cargar todo lo concerniente a la baremación en nuestra aplicación.

Los ficheros deberán situarse en _${PATH_APLICACION}/conf/initial-data/_, creando las carpetas oportunas si no existen. Deberán llamarse: 
* *tipoEvaluacion.json*, _contedrá los Datos Generales del tipo de Evaluación. Estos datos sólo se podrán carga una única vez, al iniciarse la baremación_
* *criterios.json*, _contendrá los datos de los Criterios de la evaluación. Este fichero se podrá actualizar tantas veces como se quiera, recargandolo en la página pertinente de administración_
* *conceptosEconomicos.json*, _contedrá los datos de los Conceptos Economicos de la evaluación. Este fichero se podrá actualizar tantas veces como se quiera, recargandolo en la página pertinente de administración. Pero teniendo en cuenta que los conceptos economicos que verá el solicitante, sólo se cargarán una única vez, y esta será cuando el solicitante visite por primera vez la página PCEconomicos, creada por defecto en fap._
* *datosAdicionales.json*, _contendrá los Datos Adicionales de la evaluación, que así se quieran contemplar. Este fichero se podrá actualizar tantas veces como se quiera, recargandolo en la página pertinente de administración_
* *tiposDocumentos.json*, _contendrá las uris de los Tipos de Documentos que podrá ver el evaluador en la evaluación para baremar correctamente una determinada solicitud. Para que puede ver el documento del tipo indicado, este tuvo que ser aportado por el solicitante y estar perfectamente 'verificado' por parte del gestor en la fase de Verificación._

h2. Estructura de _tipoEvaluacion.json_

El contenido del fichero se detalla a continuación:

Debe contener 7 items que se separaran por ',' y estarán encerrados entre '{', '}'

Los items tendrán la estructura _clave : valor_ y serán los siguientes:

* *nombre* Es un String que representará el nombre de la baremación.
* *tipoProcedimiento* Es un String que representará el tipo de Procedimiento al que se le está realizando la Baremación.
* *numeroEvaluacion* Es un Integer que indica el número de Evaluación que es, como una especie de versión.
* *duracion* Es un Integer que indica la duración en años que tiene estipulada la ayuda, subvención, etc.
* *inicio* Es un Integer que indica el año de inicio de la ayuda, subvención, etc. A partir de ese año y con la _duración_ se podrá conocer exactamente los años que se tendrán en cuenta.
* *comentariosAdministracion* Valor booleano que representa la presencia o no en la baremación de comentarios por parte del Evaluador o Gestor etc.
* *comentariosSolicitante* Valor booleano que representa la presencia o no en la baremación de comentarios por parte del solicitante.

De modo que el fichero debe tener un formato como el ejemplo que vemos a continuación.

bc. {
	nombre : "Tipo evaluación de innovación",
	tipoProcedimiento : "Innovacion",
	numeroEvaluacion : 1,
	duracion : 3,
	inicio: 2012,
	comentariosAdministracion : true,
	comentariosSolicitante : false,
}

h2. Estructura de _criterios.json_

El fichero criterio.json, representa la lista de criterios de evaluación, que normalmente se publica en la convocatoria. Se podrá modificar este fichero tantas veces como se requiera, y poder actualizar el modelo de la aplicación respecto a este fichero en la página pertinente de administración, a través del botón asociado. Fap lo que hará será insertar en el modelo de BBDD los nuevos criterios que encuentre o actualizará los que existen si estos han sido modificados, pero nunca tendrá en cuenta si se han eliminado criterios del fichero, por lo que *no* eliminará criterios, sólo actualizará los existentes y añadirá los nuevos. En esta lista, cada elemento será un objeto _criterio_ que tendrá los siguientes items:

* *nombre* Es un String con el Título del criterio.
* *claseCriterio* Es un String que indica la forma en la que se evalúa el criterio. Puede tener uno de los tres valores siguientes:
** _manual_ : El criterio se evalúa de forma manual en la aplicación.
** _auto_ : La evaluación del criterio es el resultado de un algoritmo predefinido de cálculo.
** _automod_ : La evaluación del criterio se calcula de forma automática como en el caso anterior pero pueder ser modificada manualmente
* *jerarquia* Es un String que denota la jerarquía de los criterios. Se utiliza para la representación de qué es un criterio, cuáles son subcriterios, etc. Es decir, si tenemos un criterio con jerarquía "A", otro con jerarquía "B" y otro con Jerarquía "A.1", lo que indicaremos será que "A" y "B" son dos criterios a la misma altura jerarquicamente (que será la más alta), y dentro de "A" habrá un subcriterio "A.1". Si hubiese un "A.1.1", ese sería subcriterio del "A.1", es decir, subcriterio del subcriterio del criterio con jerarquía "A". La jerarquía indica la situación del criterio en el árbol de criterios. Los nodos hojas son los únicos que se evalúan. Los nodos no hoja se calculan a aprtir de los nodos hoja.
* *tipoValor* String que representa el tipo de valor que admitirá el criterio. Los posibles valores son:
** _cantidad_ :  Indica que el valor admitido por ese criterio es un Double
** _lista_ :  Indica que ese criterio sólo admitirá valores de un lista, que se debe indicar en la definición del criterio como se verá más adelante a través del item *listaValores*.
* *listaValores* Representa una lista englobada por "[", "]", y cuyos elementos englobados en "{", "}", y separador por "," dentro de la lista. Este item es opcional y sólo tiene sentido indicarlo cuando el item *tipoValor* es _lista_, si es _cantidad_ no procede ponerlo. Cada elemento de la lista debe tener dos atributos que son:
** _valor_ : Valor que se asociará al elemento de la lista y que se utilizará como valor del criterio en cuestión.
** _descripcion_ : String que especifica el nombre del elemento de la lista de los valores posibles para ese criterio.
* *descripcion* String que indica la descripción del criterio.
* *comentariosAdministracion* Valor booleano que representa la presencia o no en ese criterio en concreto de comentarios por parte del Evaluador o Gestor etc.
* *comentariosSolicitante* Valor booleano que representa la presencia o no en ese criterio en concreto de comentarios por parte del solicitante.

De modo que el fichero _criterios.json_ tiene que tener una estructura similar a la que se muestra en el siguiente ejemplo:

bc. [
    {
        nombre:"Componente innovadora y tecnológica predominante (0-25 Ptos.)",
        claseCriterio:"auto",
        jerarquia:"A",
        tipoValor:"cantidad",
        descripcion:"",
        comentariosAdministracion:true,
        comentariosSolicitante:true
    },
    {
        nombre:"Carácter de la empresa de base tecnológica",
        claseCriterio:"manual",
        jerarquia:"A.1",
        tipoValor:"lista",
        listaValores:[
            {
                valor:7,
                descripcion:"ALTO: Fecha constitución EBT <=  2 años"
            },
            {
                valor:5,
                descripcion:"MEDIO: Fecha constitución EBT > 2 años y <= 6 años"
            },
            {
                valor:0,
                descripcion:"BAJO: Fecha constitución EBT > 6 años, o no EBT"
            }
        ],
        descripcion:"Prioridad a empresas de nueva o reciente creación frente a las ya consolidadas",
        comentariosAdministracion:false,
        comentariosSolicitante:false
    }
]

h2. Estructura de _conceptosEconomicos.json_

El fichero conceptosEconomicos.json, representa la lista de conceptos Economicos de evaluación, que normalmente se publica en la convocatoria. Se podrá modificar este fichero tantas veces como se requiera, y poder actualizar el modelo de la aplicación respecto a este fichero en la página pertinente de administración, a través del botón asociado. Fap lo que hará será insertar en el modelo de BBDD los nuevos Conceptos Economicos que encuentre o actualizará los que existen si estos han sido modificados, pero nunca tendrá en cuenta si se han eliminado Conceptos Economicos del fichero, por lo que *no* eliminará criterios, sólo actualizará los existentes y añadirá los nuevos. Los Conceptos Economicos que verá el solicitante, sólo se cargarán una única vez, y esta será cuando el solicitante visite por primera vez la página _PCEconomicos_, creada por defecto en fap. En esta lista, cada elemento será un objeto _ceconomicos_ que tendrá los siguientes items:

* *nombre* Es un String con el Título del concepto económico.
* *clase* String que representa la forma en la que se especifica el concepto económico. Puede tener uno de los dos valores siguientes:
** _manual_ : El concepto económico se especifica de forma manual en la aplicación.
** _auto_ : El concepto económico se autogenera como el resultado de un algoritmo predefinido de cálculo por la aplicación.
* *jerarquia* Es un String que denota la jerarquía de los conceptos económicos de la misma manera que los criterios. Se utiliza para la representación de los subconceptos económicos. La jerarquía indica la situación del concepto económico en el árbol de conceptos económicos. Los nodos hojas son los únicos que se cumplimentarán por el solicitante. Los nodos no hoja se calculan a partir de los nodos hoja, y su cálculo por defecto será la suma de sus subconceptos o nodos hoja. Si se quiere un algoritmo de cómputo distinto al de suma, se requerirá sobreescribir la función asociada como se verá más adelante.
* *comentariosAdministracion* Valor booleano que representa la presencia o no en ese concepto económico en concreto de comentarios por parte del Evaluador o Gestor etc.
* *comentariosSolicitante* Valor booleano que representa la presencia o no en ese concepto económico en concreto de comentarios por parte del solicitante.
* *tipoOtro* Valor booleano que representa que dicho Concepto Economico puede ser 'personalizable' por el solicitante. Esto es que el Concepto Economico en cuestión, puede tener una serie de hijos, que serán creados por el solicitante, para que pueda añadir aquellos Conceptos Económicos que vea oportuno y no estén en la convocatoria. La jerarquía de dichos conceptos económicos, se calculará automáticamente, a raíz del padre y teniendo en cuenta los hermanos ya creados. Por lo que este Concepto Económico, siempre deberá ser de _clase: "auto"_ ya que será calculado a partir de sus posibles hijos que cree el solicitante. Al solicitante, en la página de Conceptos Económicos que verá en la aplicación (PCEconomicos), podrá acceder a la página asociada a ese Concepto Económico, y la saldrá una tabla para ir creando todos los hijos, también de tipo _ceconomicos_ que necesite, de este Concepto Económico. Tras Iniciar la Evaluación, estos Conceptos Económicos creados por el solicitante, se añadirán automáticamente a los Conceptos Económicos que podrá evaluar el Gestor/Revisor. Por ello, sólo se podrá iniciar una única vez la Evaluación, cargando una única vez los Conceptos Económicos que haya creado manualmente el solicitante.

De modo que el fichero _conceptosEconomicos.json_ tiene que tener una estructura similar a la que se muestra en el siguiente ejemplo:

bc. [
    {
    	nombre:"Inversión aprobada",
    	clase:"manual",
    	jerarquia:"A",
    	comentariosAdministracion:false,
    	comentariosSolicitante:false,
    	tipoOtro:false
    },
    {
    	nombre:"Activo actual",
    	clase:"manual",
    	jerarquia:"B",
    	comentariosAdministracion:false,
    	comentariosSolicitante:false,
    	tipoOtro:false
    },
    {
    	nombre:"Fondos Propios",
    	clase:"manual",
    	jerarquia:"C",
    	comentariosAdministracion:false,
    	comentariosSolicitante:false,
    	tipoOtro:true
    }
]

h2. Estructura de  _datosAdicionales.json_

La baremación de un determinado procedimiento puede requerir de datos adicionales que no se engloban ni en criterios ni en conceptos económicos, para llevar a cabo la evaluación. Por ello se pone a disposición un fichero que mediante una lista de elementos representa estos tipos de datos adicionales.

Cada elemento de la lista tendrá los siguientes atributos:

* **orden** Es un Integer que se utiliza para ordenar ese dato o criterio adicional, cómo aparecerá en la página correspondiente.
* **nombre** Es un String con el Título del dato adicional y servirá de identificador para poder referenciarlo en el cálculo pertinente.
* **descripcion** String que indica la descripción del dato adicional y que será el que se muestre en la página.

bc. [
	{
		orden: 1,
		nombre: "porcentajeTeorico",
		descripcion : "Porcentaje teórico"
	},
	{
		orden: 2,
		nombre: "subvencionTotalConcedida",
		descripcion : "Subvención total concedida"
	},	
	{
		orden : 3,
		nombre: "porcentajeSubvencionConcedida",
		descripcion : "Porcentaje de la subvención concedida"
	},
	{
		orden : 4,
		nombre: "porcentajeFondosPropios",
		descripcion : "% Fondos Propios"
	},
	{
		orden : 5,
		nombre : "garantias",
		descripcion : "Garantías"
	}
]

h2. Estructura de _tiposDocumentos.json_

Este fichero permite personalizar los tipos de documentos que puede ver un Evaluador en la evaluación, para restringir el acceso a toda la lista de documentos que ha subido el solicitante y sólo permitirle observar aquellos que sean necesarios para llevar a cabo la evaluación. Para que los pueda ver, el documento del tipo indicado tuvo que ser aportado correctamente por el solicitante y 'verificado' por el gestor.

Cada elemento de la lista contendrá, simplemente:

* **uri** Uri del tipo de documento que se quiere que aparezca como documento accesible por el evaluador en la evaluación.

bc. [
	{
		uri: "fs://type1/v01"
	},
	{
		uri: "fs://type2/v03"
	}
]