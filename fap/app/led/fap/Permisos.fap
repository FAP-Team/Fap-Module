// Permisos de administracion
Permiso administrador{
	when
		agente.rolActivo = "administrador"
	return all
}

Permiso usuario{
	when
		agente.rolActivo = "usuario"
	return all
}

Permiso noUsuario{
	when
		agente.rolActivo != "usuario"
	return all
}
		
Permiso logeado{
	when 
		agente != null
	return all
}
		
// Permisos de la pag presentacion
Permiso presentacionPrepararParaFirmar{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "usuario") and
		solicitud?.registro.fasesRegistro.borrador = "false"
	return editable
	
	when
		agente.rolActivo in ("administrador", "usuario")
	return visible
}

Permiso presentacionModificar{
	vars
		SolicitudGenerica solicitud
	when
		solicitud?.registro.fasesRegistro.registro = "false"
	return editable
	
	else
	return visible		
}

Permiso presentacionObtenerBorrador{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "usuario") and
		solicitud?.registro.fasesRegistro.borrador = "true"
	return editable
}

Permiso presentacionFirmar{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "usuario") and 
		solicitud?.registro.fasesRegistro.borrador = "true" and
		solicitud.registro.fasesRegistro.firmada = "false"
	return editable
	
	when
		agente.rolActivo in ("administrador", "usuario") and
		solicitud?.registro.fasesRegistro.borrador = "true"
	return visible
}

Permiso presentacionRegistrar{
	vars
		SolicitudGenerica solicitud
	when
		solicitud?.registro.fasesRegistro.firmada = "true" and
		(
			agente.rolActivo = "usuario" and
			solicitud.registro.fasesRegistro.registro = "false"
		) or
		(
			agente.rolActivo = "administrador" and
			solicitud.registro.fasesRegistro.clasificarAed = "false"
		)
	return editable

	when
		solicitud?.registro.fasesRegistro.firmada = "true"
	return visible	
}

Permiso presentacionRecibo{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "usuario") and
		solicitud?.registro.fasesRegistro.registro = "true"
	return editable	
}	

Permiso instruccion{
	vars
		SolicitudGenerica solicitud
	when
		solicitud?.estado = "iniciada"
	return editable		
}
	
Permiso solicitudPreparadaFirmarYPresentar{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "usuario") and
		solicitud?.estado = "borrador" and
		solicitud.registro.fasesRegistro.borrador = "true"
	return all
	
	when
		agente.rolActivo in ("administrador", "usuario")
	return leer
}

Permiso editableSiSolicitudIniciada{
	vars
		SolicitudGenerica solicitud
	when
		solicitud?.estado in ("Iniciada", "Requerida", "Requerida plazo vencido", "En verificación", "Pendiente requerimiento", "Excluido", "Plazo vencido", "Verificado")
	return all
}

Permiso solicitudPreparadaFirmar{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "usuario") and
		solicitud?.estado = "borrador"  and
		solicitud.registro.fasesRegistro.borrador != null and
		solicitud.registro.fasesRegistro.borrador = "true"
	return all
	
	when
		agente.rolActivo in ("administrador", "usuario")
	return leer
}

Permiso solicitudPreparadaPresentar{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "usuario") and
		solicitud?.estado = "borrador" and
		solicitud.registro.fasesRegistro.borrador != null and
		solicitud.registro.fasesRegistro.borrador = "true" and
		solicitud.registro.fasesRegistro.firmada = "true"
	return all

	when
		agente.rolActivo in ("administrador", "usuario")
	return leer
}

// Permiso que define las solicitudes que son visibles para el usuario
Permiso solicitudes{
	mensaje = "No tiene suficientes privilegios para acceder a esta solicitud"
	vars
		SolicitudGenerica solicitud
		Participacion participacion : sql("select p from Participacion p where p.agente=? AND p.solicitud=?", agente, solicitud)
	when
		agente.rolActivo in ("administrador", "gestor", "revisor")
		or
		participacion != null 			
	return all
}

// Permisos pagina de presentacion

Permiso adminGestorRevisor{
	when
		agente.rolActivo in ("administrador", "gestor", "revisor")
	return editable
}

Permiso aportacion{
	vars
		SolicitudGenerica solicitud
	when 
		agente.rolActivo in ("administrador", "usuario", "gestor", "revisor") and
		solicitud?.estado in ("iniciada", "requerida", "verificado")
	return all
}

Permiso aportacionDocumentos{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "usuario", "gestor", "revisor") and
		solicitud?.estado in ("iniciada", "requerida", "requerida plazo vencido")
	return editable
}

Permiso noEditable{
	return visible
}

Permiso noVisibleUsuario{
	when
		usuario is visible
	return denegar
	else return all
}

Permiso solicitudEnBorrador{
	vars
		SolicitudGenerica solicitud
	when
		solicitud?.estado = "borrador"	
	return all
}

Permiso editarSolicitud{
	vars
		SolicitudGenerica solicitud
	when
		!usuario is visible
		or (
	 		agente.rolActivo = "usuario" and
	 		solicitud?.estado = "borrador" and
	 		solicitud.registro.fasesRegistro.borrador = "false"
		)
	return [editar leer]
}


Permiso participacionEnSolicitud {
	vars
		SolicitudGenerica solicitud
		Participacion participacion : sql("select p from Participacion p where p.agente=? AND p.solicitud=?", agente, solicitud)
	when
		participacion != null
	return all
}

// Indica el permiso que se tiene sobre la solicitud
// 	+ Administrador: editable
// 	+ usuario con participación: editable
// 	+ resto: none
Permiso permisoSolicitud {
	vars
		SolicitudGenerica solicitud
	when
		administrador contains _accion
	return all
	
	when
		participacionEnSolicitud contains _accion
	return all
}

// Este permiso lo tienen todas las páginas de la solicitud
// Controla que los datos no se puedan editar cuando la solicitud está preparada para registrar
Permiso solicitud {
	vars
		SolicitudGenerica solicitud
	when
		administrador contains _accion
	return editar

	when
		participacionEnSolicitud contains _accion and
	 	agente.rolActivo = "usuario" and
	 	solicitud?.estado = "borrador" and
	 	solicitud.registro.fasesRegistro.borrador = "false"
	return editar
	
	when
		participacionEnSolicitud contains _accion
	return leer
}

Permiso subirDocumentos{
	vars
		SolicitudGenerica solicitud
	when
		administrador contains _accion
		or (
	 		solicitud?.estado = "borrador" and
	 		solicitud.registro.fasesRegistro.borrador = "false"
		)
	return crear
}

Permiso visibleSiAccesoCertificado{
	when 
		agente.acceso = "certificado"
	return all
}

Permiso visibleSiAccesoContrasena{
	when 
		agente.acceso = "usuario"
	return all
}

Permiso documentoAutorizacionGenerado{
	vars 
		SolicitudGenerica solicitud
	when 
		solicitud?.registro.autorizacionFuncionario.urlDescarga != null and
		agente.funcionario != "true"
	return all
}
	
Permiso visibleFuncionarioAutorizado{
	vars
		SolicitudGenerica solicitud
	when 
		agente.funcionario = "true" and
		solicitud?.solicitante.autorizaFuncionario = "true"
	return all
}

Permiso noVisibleFuncionarioAutorizado{
	vars
		SolicitudGenerica solicitud
	when 
		agente.funcionario = "true" and
		solicitud?.solicitante.autorizaFuncionario = "true"
	return all
}

///* Se puede moficicar la aportación de documentación cuando está en borrador*/	
Permiso aportacionModificar{
	vars
		SolicitudGenerica solicitud
	when
		solicitud?.aportaciones.actual.estado in ("borrador")
	return editable
}	
	
/*
  Cuando la firma y registro se quedo en un paso intermedio. Se le muestra un mensaje
  al usuario diciendole que hubo un problema, que pulse otra vez el problema para
  completar el registro 
*/	
Permiso aportacionMensajeIntermedio{
	vars
		SolicitudGenerica solicitud
	when
		solicitud?.aportaciones.actual.estado in ("firmada", "registrada", "clasificada", "finalizada")
	return editable
}
//	
///* 
// * Permisos de la pagina de presentacion
// */

Permiso mensajeVerificacion{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "gestor", "revisor") and
		solicitud?.estado = "requerida plazo vencido"
	return leer
}

Permiso iniciarVerificacion{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "gestor", "revisor") and
		solicitud?.estado = "iniciada"
	return all
}

Permiso verificarDocumentos{
	vars
		SolicitudGenerica solicitud
		when
			agente.rolActivo in ("administrador", "gestor", "revisor") and
			solicitud?.estado = "en verificacion"
		return all
		
		when
			agente.rolActivo in ("administrador", "gestor", "revisor") and
			solicitud?.estado in ("requerida", "pendiente requerimiento", "requerida plazo vencido", "en verificacion")
		return leer
}

Permiso verificacionRequerimientos{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "gestor", "revisor") and
		solicitud?.estado in ("en verificacion", "pendiente requerimiento", "requerida", "requerida plazo vencido", "verificada", "excluido", "plazo vencido")
	return all
}

Permiso nuevoRequerimiento{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "gestor", "revisor") and
		solicitud?.estado = "pendiente requerimiento"
	return all
}

Permiso firmarRequerimiento{
	vars
		SolicitudGenerica solicitud
	when
		solicitud?.estado = "pendiente requerimiento" and
		agente.rolActivo in ("administrador", "gestor")
	return all
	
	when
		solicitud?.estado = "pendiente requerimiento"
		and
		agente.rolActivo in ("administrador", "gestor", "revisor")
	return leer
}

Permiso finalizarRequerimiento{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "gestor", "revisor") and
		solicitud?.estado in ("requerida", "requerida plazo vencido")
	return all 
}

Permiso aportacionNoNull{
	vars
		Documento doc
	when
		doc.uri = null
	return editable
}

Permiso nuevaSolicitud{
	vars
		Convocatoria convocatoria
	when
		convocatoria.estado = "presentacion"
	return all
}

//Baremación	
Permiso listaEvaluaciones{
	when
		agente.rolActivo in ("administrador", "gestor", "revisor")
	return editable
}

Permiso evaluacion{
	when
		agente.rolActivo in ("administrador", "gestor", "revisor")
	return all
}

Permiso tableKeyOnlyEstadosSolicitud{
	vars
		TableKeyValue tableKeyValue
	when
		tableKeyValue.table = "estadosSolicitud" and
		agente.rolActivo = "administrador"
	return all
}

Permiso tableKeyOnlyEstadosSolicitudUsuario{
	vars
		TableKeyValue tableKeyValue
	when
		tableKeyValue.table = "estadosSolicitudUsuario" and
		agente.rolActivo = "administrador"
	return editable
}

// Editable administrador
// Visible para el usuario
Permiso editAdminVisibleUser {
	when
		administrador is visible
	return all
	
	when
		usuario is visible
	return visible
}
