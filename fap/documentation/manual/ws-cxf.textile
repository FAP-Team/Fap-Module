h1. Generación de librerías a partir de WSDL

Para crear las librerías a partir del WSDL del servicio web utilizamos CXF.
Creamos una nueva carpeta con la siguiente estructura:

bc.. 
.
├── pom.xml
└── src
    └── main
        └── resources
            └── wsdl
                ├── firma.wsdl
                ├── registro.wsdl
                └── sgrde.wsdl

p. Dentro de la carpeta src/main/resources/wsdl colocamos los ficheros wsdl del servicio para el que queramos generar las clases.

El contenido del fichero pom.xml debe ser el siguiente

bc.. 
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>es.gobcan.platino</groupId>
	<artifactId>platino.pre</artifactId>
	<name>Platino</name>
	<version>1.0</version>
	
	<properties>
		<cxf-version>2.2.2</cxf-version>
		<jaxb-api-version>2.1</jaxb-api-version>
		<jaxb-commons-lang-plugin-version>2.1.3</jaxb-commons-lang-plugin-version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>${jaxb-api-version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-frontend-jaxws</artifactId>
			<version>${cxf-version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-transports-http</artifactId>
			<version>${cxf-version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-databinding-jaxb</artifactId>
			<version>${cxf-version}</version>
		</dependency>
	</dependencies>
	
	<build>
		<plugins>
			<plugin>
			  <groupId>org.apache.maven.plugins</groupId>
			  <artifactId>maven-source-plugin</artifactId>
			  <executions>
				<execution>
				  <id>attach-sources</id>
				  <goals>
					<goal>jar</goal>
				  </goals>
				</execution>
			  </executions>
			</plugin>
			<plugin>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-codegen-plugin</artifactId>
				<version>${cxf-version}</version>
				<executions>
					<execution>
						<id>generate-sources</id>
						<phase>generate-sources</phase>
						<configuration>
							<!--<sourceRoot>target/generated/</sourceRoot>-->
							<wsdlOptions>
								<wsdlOption>
									<wsdl>src/main/resources/wsdl/firma.wsdl</wsdl>
								</wsdlOption>
								<wsdlOption>
									<wsdl>src/main/resources/wsdl/registro.wsdl</wsdl>
								</wsdlOption>
								<wsdlOption>
									<wsdl>src/main/resources/wsdl/sgrde.wsdl</wsdl>
								</wsdlOption>
							</wsdlOptions>
						</configuration>
						<goals>
							<goal>wsdl2java</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
    </build>
	
	<distributionManagement>
        <repository>
                <id>releases</id>
                <url>http://fap-devel.etsii.ull.es/nexus/content/repositories/releases</url>
        </repository>

        <snapshotRepository>
                <id>snapshots</id>
                <name>Internal Snapshots</name>
                <url>http://fap-devel.etsii.ull.es/nexus/content/repositories/snapshots</url>
        </snapshotRepository>
	</distributionManagement>
	
</project>

p. Para darle un nombre a la librería debemos cambiar los parámetros @<groupId>@, @<artifactId>@ y @<name>@. En @<wsdlOptiones>@ debemos especificar los nombres de nuestros ficheros .wsdl.
Por último en <distributionManagement> se especifica la ruta del repositorio donde se va a subir la librería creada.

Para generar la librería

bc. mvn package

Para subir la aplicación al repositorio maven

bc. mvn deploy 