h1. Servicios

En la actualidad, los servicios se implementan mediante inyección de dependencias, utilizando Google "Guice"::https://playframework.com/modules/guice , facilita la depuración, cambio de implementaciones, ...

Ahora tanto la seguridad en los permisos como los servicios que utiliza FAP (GestorDocumental, Firma, Registro, Notificaciones, ...) utilizan esta inyección de dependencias.
¿ _Qué es lo que nos permite hacer la inyección de dependencias_ ?
Definimos la interfaz de un servicio, y en la aplicación puedes utilizar la implementación del servicio que desees oportuna,  alguna de las disponibles en el módulo FAP o cualquieras que tu quieras implementar.

Utilizando la clase *AppModule* indicamos los diferentes servicios que utilizaremos y con qué implementación.  Esta clase hereda de la configuración que está definida en el módulo donde se declaran todos los servicios.
 
!images/servicios!

h2. "Ejemplo":servicios-ejemplo

h2. Tipos de Servicios

En este apartado, diferenciamos los servicios dependiendo de quien nos los proporcione. Así, nos encontramos con los servicios proporcionados por _Platino_ y por la _ACIISI_.

h3. Platino

* "Firma":ws-firma
* "Registro":ws-registro
* "BDD Organización":ws-bd-org
* "Portafirmas":portafirmas
* "Verificación de datos":verificacion-datos
* "BDD Terceros":terceros
* "Mensajes":mensajes

h3. ACIISI

* "Comunicaciones Internas":comunicaciones-internas
* "Notificaciones":ws-notificacion 
* "Servicios Genéricos":servicios-genericos
* "Ticketing":ws-ticketing
* "Registro en libro de resoluciones":ws-resoluciones
* "Gestor documental":ws-gd


h2. Mostrar errores al usuario

En ocasiones un servicio web puede no estar disponible o puede que la petición sea incorrecta, por lo que no se podrá continuar con el proceso que llevaba el usuario. Si queremos mostrarle un mensaje de información o error al usuario en estas situaciones, podemos hacer uso de un método que, utilizando los mensajes flash de Play!, muestra los distintos avisos en el navegador.

!images/flashServicesFail!
Para utilizarlo basta con llamar al método @ControllersUtils.flashServicesFail(String mensaje)@, que almacenará el error y lo mostrará correspondientemente cuando la siguiente vista se renderice.