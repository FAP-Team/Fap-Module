// Permisos de administracion
Permiso administrador{
	when
		agente.rolActivo = "administrador"
	return all
}

Permiso adminOrGestor{
	when
		agente.rolActivo in ("administrador", "gestor")
	return all
}

Permiso usuario{
	when
		agente.rolActivo = "usuario"
	return all
}

Permiso noUsuario{
	when
		agente.rolActivo != "usuario"
	return all
}
		
Permiso logeado{
	when 
		agente != null
	return all
}
		
// Permisos de la pag presentacion
Permiso presentacionPrepararParaFirmar{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "usuario", "gestor") and
		solicitud?.registro.fasesRegistro.borrador = "false"
	return editable
	
	when
		agente.rolActivo in ("administrador", "usuario", "gestor")
	return visible
}

Permiso presentacionModificar{
	vars
		SolicitudGenerica solicitud
	when
		solicitud?.registro.fasesRegistro.registro = "false"
	return editable
	
	else
	return visible		
}

Permiso presentacionObtenerBorrador{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "usuario", "gestor") and
		solicitud?.registro.fasesRegistro.borrador = "true"
	return editable
}

Permiso presentacionFirmar{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "usuario", "gestor") and 
		solicitud?.registro.fasesRegistro.borrador = "true" and
		solicitud.registro.fasesRegistro.firmada = "false"
	return editable
	
	when
		agente.rolActivo in ("administrador", "usuario", "gestor") and
		solicitud?.registro.fasesRegistro.borrador = "true"
	return visible
}

Permiso presentacionRegistrar{
	vars
		SolicitudGenerica solicitud
	when
		solicitud?.registro.fasesRegistro.firmada = "true" and
		(
			agente.rolActivo = "usuario" and
			solicitud.registro.fasesRegistro.registro = "false"
		) or
		(
			agente.rolActivo in ("administrador", "gestor") and
			solicitud.registro.fasesRegistro.clasificarAed = "false"
		)
	return editable

	when
		solicitud?.registro.fasesRegistro.firmada = "true"
	return visible	
}

Permiso presentacionRecibo{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "usuario", "gestor") and
		solicitud?.registro.fasesRegistro.registro = "true"
	return editable	
}	

Permiso instruccion{
	vars
		SolicitudGenerica solicitud
	when
		solicitud?.estado = "iniciada"
	return editable		
}
	
Permiso solicitudPreparadaFirmarYPresentar{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "usuario", "gestor") and
		solicitud?.estado = "borrador" and
		solicitud.registro.fasesRegistro.borrador = "true"
	return all
	
	when
		agente.rolActivo in ("administrador", "usuario", "gestor")
	return leer
}

Permiso editableSiSolicitudIniciada{
	vars
		SolicitudGenerica solicitud
	when
		solicitud?.estado in ("Iniciada", "Requerida", "Requerida plazo vencido", "En verificación", "Pendiente requerimiento", "Excluido", "Plazo vencido", "Verificado")
	return all
}

Permiso solicitudPreparadaFirmar{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "usuario", "gestor") and
		solicitud?.estado = "borrador"  and
		solicitud.registro.fasesRegistro.borrador != null and
		solicitud.registro.fasesRegistro.borrador = "true"
	return all
	
	when
		agente.rolActivo in ("administrador", "usuario", "gestor")
	return leer
}

Permiso solicitudPreparadaPresentar{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "usuario", "gestor") and
		solicitud?.estado = "borrador" and
		solicitud.registro.fasesRegistro.borrador != null and
		solicitud.registro.fasesRegistro.borrador = "true" and
		solicitud.registro.fasesRegistro.firmada = "true"
	return all

	when
		agente.rolActivo in ("administrador", "usuario", "gestor")
	return leer
}

// Permiso que define las solicitudes que son visibles para el usuario
Permiso solicitudes{
	mensaje = "No tiene suficientes privilegios para acceder a esta solicitud"
	vars
		SolicitudGenerica solicitud
		Participacion participacion : sql("select p from Participacion p where p.agente=? AND p.solicitud=?", agente, solicitud)
	when
		agente.rolActivo in ("administrador", "gestor", "revisor")
		or
		participacion != null 			
	return all
}

// Permisos pagina de presentacion

Permiso adminGestorRevisor{
	when
		agente.rolActivo in ("administrador", "gestor", "revisor")
	return editable
}

Permiso aportacion{
	vars
		SolicitudGenerica solicitud
	when 
		agente.rolActivo in ("administrador", "usuario", "gestor", "revisor") and
		solicitud?.estado != "borrador"
	return all
}

Permiso aportacionDocumentos{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "usuario", "gestor", "revisor") and
		solicitud?.estado not in ("borrador")
	return editable
}

Permiso incorporarDocumentos {
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "gestor") and
		solicitud?.estado not in ("borrador")
	return
		all
}

Permiso noEditable{
	return visible
}

Permiso noVisibleUsuario{
	when
		usuario is visible
	return denegar
	else return all
}

Permiso solicitudEnBorrador{
	vars
		SolicitudGenerica solicitud
	when
		solicitud?.estado = "borrador"	
	return all
}

Permiso editarSolicitud {
	vars
		SolicitudGenerica solicitud
	when
		!usuario is visible
		or (
	 		agente.rolActivo = "usuario" and
	 		solicitud?.estado = "borrador" and
	 		solicitud?.registro?.fasesRegistro?.borrador = "false"
		)
	return [editar leer]
	when
		!usuario is visible
		or (
	 		agente.rolActivo = "usuario"
		)
	return [leer]
}

Permiso editarFirma {
	vars
		SolicitudGenerica solicitud
		Participacion participacion : sql("select p from Participacion p where p.agente=? AND p.solicitud=?", agente, solicitud)
	when
		!usuario is visible
		or (
			(participacion.tipo != "autorizado") and
	 		(agente.rolActivo = "usuario" and
	 		solicitud?.estado = "borrador" and
	 		solicitud?.registro?.fasesRegistro?.borrador = "false"
			)
		)
	return [editar leer]
	when
		!usuario is visible
		or (
	 		agente.rolActivo = "usuario"
		) or (
			participacion.tipo = "autorizado"
		)
	return [leer]
}


Permiso participacionEnSolicitud {
	vars
		SolicitudGenerica solicitud
		Participacion participacion : sql("select p from Participacion p where p.agente=? AND p.solicitud=?", agente, solicitud)
	when
		participacion != null
	return all
}

// Indica el permiso que se tiene sobre la solicitud
// 	+ Administrador: editable
// 	+ usuario con participación: editable
// 	+ resto: none
Permiso permisoSolicitud {
	vars
		SolicitudGenerica solicitud
	when
		adminOrGestor contains _accion
	return all
	
	when
		participacionEnSolicitud contains _accion
	return all
}

// Este permiso lo tienen todas las páginas de la solicitud
// Controla que los datos no se puedan editar cuando la solicitud está preparada para registrar
Permiso solicitud {
	vars
		SolicitudGenerica solicitud
	when
		adminOrGestor contains _accion
	return editar

	when
		participacionEnSolicitud contains _accion and
	 	agente.rolActivo = "usuario" and
	 	solicitud?.estado = "borrador" and
	 	solicitud.registro.fasesRegistro.borrador = "false"
	return editar
	
	when
		participacionEnSolicitud contains _accion
	return leer
}

Permiso subirDocumentos{
	vars
		SolicitudGenerica solicitud
	when
		adminOrGestor contains _accion
		or (
	 		solicitud?.estado = "borrador" and
	 		solicitud.registro.fasesRegistro.borrador = "false"
		)
	return crear
}

Permiso visibleSiAccesoCertificado{
	when 
		agente.acceso = "certificado"
	return all
}

Permiso visibleSiAccesoContrasena{
	when 
		agente.acceso = "usuario"
	return all
}

Permiso documentoAutorizacionGenerado{
	vars 
		SolicitudGenerica solicitud
	when 
		solicitud?.registro.autorizacionFuncionario.urlDescarga != null and
		agente.funcionario != "true"
	return all
}
	
Permiso visibleFuncionarioAutorizado{
	vars
		SolicitudGenerica solicitud
	when 
		agente.funcionario = "true" and
		solicitud?.solicitante.autorizaFuncionario = "true"
	return all
}

Permiso noVisibleFuncionarioAutorizado{
	vars
		SolicitudGenerica solicitud
	when 
		agente.funcionario = "true" and
		solicitud?.solicitante.autorizaFuncionario = "true"
	return denegar
}

///* Se puede moficicar la aportación de documentación cuando está en borrador*/	
Permiso aportacionModificar{
	vars
		SolicitudGenerica solicitud
	when
		solicitud?.aportaciones.actual.estado in ("borrador")
	return editable
}	
	
/*
  Cuando la firma y registro se quedo en un paso intermedio. Se le muestra un mensaje
  al usuario diciendole que hubo un problema, que pulse otra vez el problema para
  completar el registro 
*/	
Permiso aportacionMensajeIntermedio{
	vars
		SolicitudGenerica solicitud
	when
		solicitud?.aportaciones.actual.estado in ("firmada", "registrada", "clasificada", "finalizada")
	return editable
}
//	
///* 
// * Permisos de la pagina de presentacion
// */

Permiso mensajeVerificacion{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "gestor", "revisor") and
		solicitud?.estado = "requerida plazo vencido"
	return leer
}

Permiso iniciarVerificacion{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "gestor", "revisor") and
		solicitud?.verificacion?.estado = "iniciada" and
		(solicitud?.estado in (/*"iniciada", "verificado",*/ "enVerificacion"))
		
	return all
}

Permiso verificarDocumentos{
	vars
		SolicitudGenerica solicitud
		Verificacion verificacion
	when
		(agente.rolActivo in ("administrador", "gestor", "revisor")) and
		(
			(_accion in (leer, editar))
			and (solicitud.estado in ("enVerificacion", "excluido"))
			and verificacion.estado != null
			and verificacion.estado = "enVerificacion"
		)	
	return 
		all
}

Permiso verificacionRequerimientos{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "gestor", "revisor") and
		solicitud?.estado in ("en verificacion", "pendiente requerimiento", "requerida", "requerida plazo vencido", "verificada", "excluido", "plazo vencido")
	return all
}

Permiso nuevoRequerimiento{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "gestor", "revisor") and
		solicitud?.estado = "pendiente requerimiento"
	return all
}

Permiso firmarRequerimiento{
	vars
		SolicitudGenerica solicitud
	when
		solicitud?.estado = "pendiente requerimiento" and
		agente.rolActivo in ("administrador", "gestor")
	return all
	
	when
		solicitud?.estado = "pendiente requerimiento"
		and
		agente.rolActivo in ("administrador", "gestor", "revisor")
	return leer
}

Permiso finalizarRequerimiento{
	vars
		SolicitudGenerica solicitud
	when
		agente.rolActivo in ("administrador", "gestor", "revisor") and
		solicitud?.estado in ("requerida", "requerida plazo vencido")
	return all 
}

Permiso aportacionNoNull{
	vars
		Documento doc
	when
		doc.uri = null
	return editable
}

Permiso nuevaSolicitud{
	vars
		Convocatoria convocatoria
	when
		convocatoria.estado = "presentacion"
	return all
}

//Baremación	
Permiso listaEvaluaciones{
	when
		agente.rolActivo in ("administrador", "gestor", "revisor")
	return editable
}

Permiso evaluacion{
	when
		agente.rolActivo in ("administrador", "gestor", "revisor")
	return all
}

Permiso tableKeyOnlyEstadosSolicitud{
	vars
		TableKeyValue tableKeyValue
	when
		tableKeyValue.table = "estadosSolicitud"
	return all
}

Permiso tableKeyOnlyEstadosSolicitudUsuario{
	vars
		TableKeyValue tableKeyValue
	when
		tableKeyValue.table = "estadosSolicitudUsuario"
	return editable
}

// Editable administrador
// Visible para el usuario
Permiso editAdminGestorVisibleUser {
	when
		adminOrGestor is visible
	return all
	
	when
		usuario is visible
	return visible
}


Permiso noHayverificacion{
	vars
		SolicitudGenerica solicitud
		Verificacion verificacion : sql("select verificacion from SolicitudGenerica s where s.id=?", solicitud.id)
	when
		(agente.rolActivo in ("administrador", "gestor", "revisor")) and ((verificacion = null) or ((verificacion.estado=null) or (verificacion.estado in ("enRequerido", "plazoVencido", "verificacionPositiva", "verificacionNegativa"))))
	return
		all
}

Permiso hayverificacion{
	vars
		SolicitudGenerica solicitud
		Verificacion verificacion : sql("select verificacion from SolicitudGenerica s where s.id=?", solicitud.id)
	when
		(agente.rolActivo in ("administrador", "gestor", "revisor")) and ((verificacion != null) and (verificacion.estado!=null) and (verificacion.estado in ("iniciada", "verificandoTipos", "enVerificacion", "enVerificacionNuevosDoc", "enRequerimiento", "enRequerimientoFirmaSolicitada")))
	return
    	all
}

// Permiso fantasma, ya que va a ser sobrescrito para su uso.
// Lo que en verdad está declarado no es lo que hace.
// Este permiso comprueba que no haya documentación nueva adjuntada por el solicitante
// y que no esté en la verificación actual.
Permiso hayNuevaDocumentacionVerificacion{
	when
		agente.rolActivo != null
	return
		all
}

Permiso verificarTiposDocumentos{
	vars
		SolicitudGenerica solicitud
		Verificacion verificacion
	when
		(_accion in (leer, editar)) and 
		(agente.rolActivo in ("administrador", "gestor", "revisor")) and
		(solicitud.estado = "enVerificacion") and
		(verificacion != null and verificacion.estado != null and verificacion.estado = "verificandoTipos")
	return
		all
}

Permiso verificacionConNuevosDoc{
	vars
		SolicitudGenerica solicitud
	when
		(agente.rolActivo in ("administrador", "gestor", "revisor")) and (solicitud.verificacion.estado != null) and (solicitud.verificacion.estado = "enVerificacionNuevosDoc") 
	return
    	all
}

Permiso accederSiSolicituNoBorrador{
	vars
		SolicitudGenerica solicitud
	when 
		(agente.rolActivo in ("administrador", "usuario", "gestor", "revisor")) and
		(solicitud.estado != "borrador")
	return 
		all
}

// Permiso que controla si se pueden loguear con usuario y contraseña
// SOBREESCRITO EN SECUREFAP.JAVA
Permiso loginTipoUser{
	when
		agente.rolActivo = "administrador"
	return 
		all
}

// Para mostrar en las páginas únicamente el agente perteneciente al usuario logueado
Permiso miAgente{
	vars 
		Agente agenteActual 
	when 
		agenteActual.id = agente.id
	return
		all
}

// Permiso que controla que se muestra la búsqueda en la pantalla inicial
// SOBREESCRITO EN SECUREFAP.JAVA
Permiso listaSolicitudesConBusqueda{
	when
		agente.rolActivo != "usuario"
	return 
		all
}

// Permiso que controla que no se muestra la búsqueda en la pantalla inicial
// SOBREESCRITO EN SECUREFAP.JAVA
Permiso listaSolicitudesSinBusqueda{
	when
		agente.rolActivo = "usuario"
	return 
		all
}

// Permiso para saber el estado de la búsqueda (si no se ha buscado todavía, no mostramos la tabla de resultados)
// SOBREESCRITO EN SECUREFAP.JAVA
Permiso mostrarResultadoBusqueda{
	when
		agente.rolActivo != "usuario"
	return
		all
}


Permiso prepararDesistimiento{
	vars
		SolicitudGenerica solicitud
	when
		(_accion = leer) or
		(solicitud.desistimiento.registro.fasesRegistro.borrador = "false")
	return
		editable
}

Permiso generarBorradorDesistimiento{
	vars
		SolicitudGenerica solicitud
	when
		(_accion = leer) or
		solicitud.desistimiento.motivo != null
	return
		all
}

Permiso enBorradorDesistimiento{
	vars
		SolicitudGenerica solicitud
	when
		(_accion = leer) or
		(solicitud.desistimiento.registro.fasesRegistro.borrador="true")
	return
		all
}

Permiso editarDesistimiento {
	vars
		SolicitudGenerica solicitud
	when 
		((agente.rolActivo = "usuario") and (_accion = leer))
		or solicitud.id = solicitud.id // Eliminar esta línea
	return
		editable
}

/*
 * Permiso “modificarDesistimiento�?
 *
 */

Permiso modificarDesistimiento{
	vars
	 	SolicitudGenerica solicitud
	when
		(_accion = leer) or
		(solicitud.desistimiento.registro.fasesRegistro.registro="false")
	return
		all
}

/*
 * Permiso "instruccionDesistimiento
 * Se concede permiso si la fecha de cierre de desistimiento no se ha cumplido
 *
 * - Regla sobreescrita
 */
Permiso instruccionDesistimiento{
	vars
		SolicitudGenerica solicitud
	when
		solicitud.id = solicitud.id
	return
		all
}
/*
 * Permiso “mesajeIntermedioDesistimiento"
 */
Permiso mensajeIntermedioDesistimiento{
	vars
		SolicitudGenerica solicitud
	when
		(solicitud.desistimiento.registro.fasesRegistro.firmada = "true" or
		solicitud.desistimiento.registro.fasesRegistro.registro = "true" or
		solicitud.desistimiento.registro.fasesRegistro.expedienteAed = "true") and
		solicitud.desistimiento.registro.fasesRegistro.clasificarAed = "false"
	return
		all
}
/*
 * Permiso “clasificadaDesistimiento�?
 *
 */

Permiso clasificadaDesistimiento{
	vars
		SolicitudGenerica solicitud
	when
		//TODO SMB 04/04/2012
		(_accion = leer) or
		(solicitud.desistimiento.registro.fasesRegistro.clasificarAed="true")
	return
		visible
}
/*
 * Permiso “firmarRegistrarDesistimiento�?
 *
 */

Permiso firmarRegistrarDesistimiento{
	vars
		SolicitudGenerica solicitud
	when
		(_accion = leer) or
		(solicitud.desistimiento.registro.fasesRegistro.clasificarAed="false")
	return
		all
}
/*
 * Permiso “firmarDesistimiento�?
 *
 */

Permiso firmarDesistimiento{
	vars
		SolicitudGenerica solicitud
	when
		(_accion = leer) or
		(solicitud.desistimiento.registro.fasesRegistro.firmada="false")
	return
		all
}
/*
 * Permiso “registrarDesistimiento�?
 *
 */

Permiso registrarDesistimiento{
	vars
		SolicitudGenerica solicitud
	when
		(_accion = leer) or
		(solicitud.desistimiento.registro.fasesRegistro.firmada = "true" and
		solicitud.desistimiento.registro.fasesRegistro.registro = "false" and
		solicitud.desistimiento.registro.fasesRegistro.clasificarAed = "false")
	return
		visible
}


Permiso verTablaCEconomicosOtros{
	vars
		CEconomico ceconomico
	when
		ceconomico.tipo.tipoOtro="true"
	return all
}

Permiso iniciarTipoEvaluacion{
	vars
		TipoEvaluacion tipoEvaluacion : sql("select te from TipoEvaluacion te")
	when
		tipoEvaluacion = null
	return
		all
}

Permiso iniciarBaremacion {
	vars
		TipoEvaluacion tipoEvaluacion : sql("select te from TipoEvaluacion te")
	when
		(tipoEvaluacion != null) and (tipoEvaluacion.estado = "cargada")
	return
		all
}

Permiso actualizarBaremacion {
	vars
		TipoEvaluacion tipoEvaluacion : sql("select te from TipoEvaluacion te")
	when
		(tipoEvaluacion != null) and (tipoEvaluacion.estado = "iniciada")
	return
		all
}

Permiso notificacionEditableSiNoLeida {
	vars
		Notificacion notificacion
	when
		notificacion.estado != null and notificacion.estado != "puestaadisposicion"
	return
		visible
	when
		notificacion.estado != null
	return
		all
}
// Permisos sobre Requerimientos
Permiso requerimiento {
	vars
		Verificacion verificacion
	when
		verificacion?.estado in ("enRequerido", "enRequerimiento", "enRequerimientoFirmaSolicitada")
	return
		all
}

Permiso requerimientoAFirmar {
	vars
		Verificacion verificacion
	when
		agente.rolActivo in ("gestor", "administrador")
		and verificacion?.estado in ("enRequerimiento", "enRequerimientoFirmaSolicitada")
		and (
			verificacion?.requerimiento?.registro?.fasesRegistro?.registro = "false"
			or verificacion?.requerimiento?.notificacion = null
			)
	return
		all
	when
		agente.rolActivo in ("revisor")
		and verificacion?.estado in ("enRequerimiento", "enRequerimientoFirmaSolicitada")
		and (
			verificacion?.requerimiento?.registro?.fasesRegistro?.registro = "false"
			or verificacion?.requerimiento?.notificacion = null
			)
	return
		visible
}

Permiso requerimientoFirmado {
	vars
		Verificacion verificacion
	when
		verificacion?.requerimiento?.registro?.fasesRegistro?.firmada = "true"
		and verificacion?.requerimiento?.notificacion?.estado != null
		and verificacion?.requerimiento?.notificacion?.estado in ("creada")
	return all
}

Permiso requerimientoRequerirFirma {
	vars
		Verificacion verificacion
	when
		verificacion?.estado in ("enRequerimiento") and verificacion?.requerimiento?.registro?.fasesRegistro?.firmada != "true"
	return
		all
	when
		verificacion?.estado in ("enRequerimientoFirmaSolicitada") and verificacion?.requerimiento?.registro?.fasesRegistro?.firmada != "true"
	return
		visible
}

Permiso obtenerRequerimiento {
	vars
		Verificacion verificacion
	when
		verificacion?.estado in ("enRequerimiento", "enRequerimientoFirmaSolicitada", "enRequerido")
	return
		all
}

/*
 * Permiso “prepararSolicitud”
 *
 * - Podemos preparar la solicitud siempre que esta no haya sido preparada previamente.
 * Una vez que esté preparada para firmar no podríamos “Guardar trámite”, ni “Añadir documentación” ni  “Preparar para firmar”
 * Es decir, permitimos editar al aplicar este permiso siempre que Solicitud.registro.faserRegistro.borrador = false
 * Si no es así, todos estos botones deberían mostrarse deshabilitados.
 */

Permiso prepararSolicitud {
	vars
		SolicitudGenerica solicitud
	when
		(_accion = editar) and
		(solicitud.registro.fasesRegistro.borrador = "false")  
	return
		editable
	when
		(_accion = editar) and
		(solicitud.registro.fasesRegistro.borrador = "true")  
	return
		visible
}

/*
 * Permiso “enBorradorSolicitud”
 *
 * - Podemos visualizar el borrador y pulsar para modificar la solicitud si el borrador se generó previamente
 * Por tanto los botones “Obtener borrador” , “Modificar solicitud”, “Presentar solicitud”  se muestran deshabilitados si
 * Solicitud.registro.faseRegistro.borrador =false
 */

Permiso enBorradorSolicitud{ 
	vars 
		SolicitudGenerica solicitud
	when
		(_accion = leer) or 
		((solicitud.registro.fasesRegistro.borrador="true") and
		 (solicitud.registro.fasesRegistro.clasificarAed="false") 	
		) 
	return
		all
		
	when
		(solicitud.registro.fasesRegistro.clasificarAed="true") 
	return
		visible	
}

Permiso clasificadaSolicitud{
	vars 
	 	SolicitudGenerica solicitud
	when
		//TODO SMB 04/04/2012
		(_accion = leer) or
		(solicitud.registro.fasesRegistro.clasificarAed="true")   
	return
		all
}

/*
 * Permiso “modificarSolicitud”
 *
 * - Para permitir modificar la aceptación o renuncia también se debe comprobar que no se haya producido el registro de entrada de la solicitud asociada
 * Por tanto, también debemos mostrar deshabilitado el botón “Modificar solicitud” si
 * Solicitud.registro.faseregistro.registro =true
 */

Permiso modificarSolicitud{
vars
 	SolicitudGenerica solicitud
when
	(_accion = leer) or
	(solicitud.registro.fasesRegistro.registro="false")
return
	all
}
 /*
 * Permiso “mesajeIntermedioSolicitud"
 */
Permiso mensajeIntermedioSolicitud{
vars
	SolicitudGenerica solicitud
when
	(solicitud.registro.fasesRegistro.firmada = "true" or
	solicitud.registro.fasesRegistro.registro = "true" or
	solicitud.registro.fasesRegistro.expedienteAed = "true") and
	solicitud.registro.fasesRegistro.clasificarAed = "false"
return
	all
}
/*
 * Permiso “firmarRegistrarSolicitud”
 *
 * - Este permiso se aplica al botón “Firmar y Registrar”
 * El botón está deshabilitado si Solicitud.registro.faseregistro.clasificadaAED = false
 * En el proceso se debería controlar si se ha pasado por todas las fases e intentar recuperarlo de un posible fallo.
 * Si ya está firmada, se debería eliminar la firma anterior y proceder a realizar una nueva firma y registro (revisar
 * si esto estaba previsto en el código, posiblemente no”
 * Si ya está registrada, se intenta clasificarlo nuevamente
 */

Permiso firmarRegistrarSolicitud{
vars
	SolicitudGenerica solicitud
when
	(_accion = leer) or
	(solicitud.registro.fasesRegistro.clasificarAed="false")
return
	all
}
/*
 * Permiso “firmarSolicitud”
 *
 * - Este permiso se aplica al botón firmar.
 * Este botón estará deshabilitado siempre que en la fase de registro ya se haya realizado todas las firmas necesaria.
 * Hay que comprobar que se hace un correcto control del proceso de firma tanto cuando firma un represente solidario/”administrador único”
 * o cuando la firma se produce por representantes mancomunados, deben firmar en este caso todos los que se han indicado que tengan tipo
 * de representación mancomunada.
 */

Permiso firmarSolicitud{
vars
	SolicitudGenerica solicitud
when
	(_accion = leer) or
	(solicitud.registro.fasesRegistro.firmada="false")
return
	all
}
/*
 * Permiso “registrarSolicitud”
 *
 * - Este botón estará habilitado si cumplen las siguientes condiciones:
 * La solicitud ha sido firmada y no ha sido aún clasificada en el AED
 * Solicitud.registro.faseregistro.firmada = true y solicitud.registro.faseregistro.clasificadaAED  = false
 * Hay que tener previsto una recuperación del proceso, es decir, se produjo el registro, pero no la clasificación de recibo obtenido,
 * para continuar el proceso en la fase de clasificación.
 */

Permiso registrarSolicitud{
vars
	SolicitudGenerica solicitud
when
	(_accion = leer) or
	(solicitud.registro.fasesRegistro.firmada = "true" and
		solicitud.registro.fasesRegistro.registro = "false" and
		solicitud.registro.fasesRegistro.clasificarAed = "false")
return
	all
}