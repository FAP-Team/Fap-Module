h1. Controladores

h2. Controladores en Play Framework

En Play Framework, un controlador es una clase Java subclase de **play.mvc.Controller** y situada en un paquete cuya raíz sea **controllers**. En un controlador, cada método que sea público y estático es considerado una **acción**. Estos métodos pueden tener parámetros, los cuales serán obtenidos automáticamente a partir los parámetros de la petición HTTP que desencadena la invocación de la acción.
Normalmente un método acción no termina con una sentencia **return**, sino que lo hace con la llamada a alguno de los métodos predefinidos que renderizan una respuesta HTTP, o con la llamada a otro método acción, lo que provoca una redirección. Todo aquel código que ponga a continuación de estas llamadas no se ejecutará. Además de los métodos acción, existe otro tipo de método, los metodos de utilidades que se diferencian de los de acción por la anotación @Util. Estos métodos son llamados desde los métodos de acción pero en este caso no se produce una redirección, y el código que esta a continuación de la llamada continua ejecutándose.  

h3. Parámetros

Los datos de una petición HTTP que pueden ser pasados como parámetros a una acción de un controlador pueden proceder de tres sitios distintos:
* del path de la URI:  **/solicitud/4**, donde 4 es una parte dinámica del patrón de la URI.
* del Query string de la URI:  **/solicitud?id=4**
* del cuerpo de la petición:  para cuando los datos son enviados a través de un formulario HTML.

De esta manera, una petición cuya URI sea de la forma **/solicitud?id=4** puede desembocar en la invocación de la acción del controlador que se propone a continuación:

bc.  package controllers;
 
 import play.*;
 
 public class SolicitanteController extends Controller {
    public static void index(Long id){
       Solicitud solicitud = getSolicitud(id);
       render(solicitud);
    }
 }

Podemos observar que la clase SolicitanteController se encuentra en el paquete controller, extiende de play.mvc.Controller y el método index es public y static, por lo tanto cumple todos los requisitos para ser considerada una acción de un controlador. Además, la acción **index** tiene un parámetro con el nombre **id**, mismo nombre que el parámetro de la URI anterior, por lo que Play copia el valor del parámetro HTTP al parámetro de la acción (4, en este caso).

Siguiendo con este ejemplo, si la acción **index** no se hubiera especificado ningún parámetro, también hubiera sido posible recuperar el valor de los parámetros HTTP (**id** en este caso), ya que todos los controladores (al extender de play.mvc.Controller) tienen acceso a un objeto de tipo mapa que contiene todos los parámetros de la petición actual. En este caso el método index podría haber quedado así:

bc. public static void index(){
   Long id = params.get("id", Long.class);
   Solicitud solicitud = getSolicitud(id);
   render(solicitud);
}

Vemos como en este caso se está convirtiendo el parámetro HTTP a un objeto tipo Long. Además de este, Play es capaz de convertir parámetros a todos los tipos básicos comunes de Java, y a algunas otras clases que se listan a continuación:

* **tipos simples**: int, long, boolean, char, byte, float, double, Integer, Long, Boolean, Char, String, Byte, Float, Double.
* **fechas**: Date, Calendar
* **ficheros**: File (permite subir ficheros al servidor)
* **arrays y Collections**: para datos multivaluados
* **entidades**: subclases de play.db.jpa.Model

A continuación se muestra un ejemplo de cómo se transforman los datos de una petición a una instancia de una entidad:

Petición:

bc. /save?solicitante.nombre=Juan&solicitante.apellidos=Cruz&solicitante.email=juan@gmail.com

Entidad:

bc. @Entity
public class Persona extends Model {
   public String nombre; 
   public String apellidos; 
   public String email; 
}

Acción del controlador:

bc. public static void save(Persona solicitante){
   ...

h3. Resultados de una acción

La misión de un método acción es manejar una petición HTTP y generar la correspondiente respuesta. Play provee una serie de métodos que generan distintos tipos de respuesta.

* **renderText()**: es el método más simple. Se le pasa por parámetro un String, que es escrito directamente en la correspondiente respuesta HTTP.

* **renderBinary()**: para responder con datos binarios, como por ejemplo un fichero almacenado en el servidor.

* **renderJson()**: para convertir objetos a formato JSON.

h4. Renderización de plantillas

La manera más común de crear una respuesta HTTP es utilizar el sistema de plantillas de Play para generar dinámicamente un documento HTML, XML, JSON, o cualquier otro tipo de documento textual.

Para utilizar una plantilla al final de la ejecución de una acción hay que hacer una llamada a alguno de los métodos que provee Play con tal fin. Cabe recordar que el código que se ejecute después de una de estas llamadas nunca se va a ejecutar.

bc. public class SolicitanteController extends Controller {
   public static void index(){
      render();
      System.out.println("Nunca se ejecuta esto");
   }
}

Con **render()**, Play infiere el nombre de la plantilla que tiene que utilizar a partir del nombre de la acción, del nombre del controlador, y del nombre de paquete. Por ejemplo, en este caso se utilizará la plantilla **index.html** situada en el directorio **views/SolicitanteController/** de la aplicación.

bc. public static void index(Long id){
   Solicitud solicitud = getSolicitud(id);
   render(solicitud);
}

Las plantillas de Play pueden recibir un número variable de objetos como parámetros. En este caso se está llamando a la misma plantilla que en el caso anterior, pero pasándole como parámetro un objeto de tipo Solicitud. En la plantilla deberá haber un objeto con el nombre "solicitud".

bc. public static void index(){
   renderTemplate("Solicitante/Solicitante.html");
}

**renderTemplate()** hace lo mismo que **render()**, pero adicionalmente en el primer parámetro se le especifica la plantilla que quiere renderizar. Por ejemplo, en este caso se utilizará la plantilla **Solicitante.html** situada en el directorio **views/Solicitante/** de la aplicación. 


h4. Redirecciones

Al final de la ejecución de una acción también es posible emitir una respuesta HTTP de tipo Redirect, mediante el método **redirect()**. Este método permite especificar directamente una URI, o una acción de un controlador. Si se le especifica una acción Play se encarga de obtener la URI que genera una invocación a esa acción, y la devuelve en la respuesta.

bc. public class SolicitanteController extends Controller {
 
    public static void index(Long idSolicitud){
       Solicitud solicitud = Solicitud.findById(idSolicitud);
       render(solicitud);
    }
 
    public static void save(Long idSolicitud){
       Solicitud solicitud = Solicitud.findById(idSolicitud);
       redirect("SolicitanteController.index" , idSolicitud);
    }
}

En este ejemplo se tiene un controlador con dos acciones. Mediante **redirect()** la acción **save** hace una redirección a la otra acción de este controlador, **index**. Además, vemos como es posible pasar objetos en redirecciones.
			
"Para mas información":http://www.playframework.org/documentation/1.2/controllers

h2. Controladores en Fap

En las aplicaciones Fap existen dos controladores por cada página y otros dos por cada popup. De cada dos, uno de ellos se sobreescribe automáticamente cada vez que se ejecuta el comando **fap:generate** para generar la aplicación, y se denomina "**controlador generado**". El otro controlador no se sobreescribe, sino que conserva su contenido. Este último se denomina "**controlador manual**". El controlador manual extiende del controlador generado, y la primera vez que se genera la aplicación a partir del DSL, situación en la cual el directorio de controladores está vacío, el generador también escribe el controlador manual, declarándolo subclase del controlador generado, pero sin ningún contenido. Con este mecanismo se posibilita al programador de la aplicación Fap el modificar los comportamientos que traen los controladores por defecto. Como el fichero de rutas **conf/routes** (que establece el mapeo de las URLs con las acciones que invocan) siempre va a hacer referencia a las acciones de los controladores manuales, si dichos métodos existen, se utilizan, y si no, se hace uso de los de la clase padre: el controlador generado. A continuación se muestra un extracto de una pareja de controladores de una aplicación Fap:

Controlador generado: 

bc. package controllers.gen;
 
 public class EjemploControllerGen extends GenericController {
 
    public static void index(Long idSolicitud){
       Solicitud solicitud = getSolicitud(idSolicitud);
       renderTemplate("gen/Ejemplo/Ejemplo.html", solicitud);
    }
    
    public static void save(Long idSolicitud, Solicitud solicitud){
       checkAuthenticity();
       Solicitud dbsolicitud = getSolicitud(idSolicitud);
       saveValidateCopy(dbsolicitud, solicitud);
       if(!validation.hasErrors()){
          dbsolicitud.save();
       }
       redirect( "EjemploController.index" , idSolicitud);
    }
    
   ...

Controlador manual:

bc. package controllers;
 
 public class EjemploController extends EjemploControllerGen {
 
    public static void save(Long idSolicitud, Solicitud solicitud){
       redirect( "EjemploController.index" , idSolicitud);
    }
    
   ...

Estos controladores, cuyos códigos han sido simplificados para mejor entendimiento en este punto, corresponderían a una página denominada "Ejemplo" escrita en el DSL. Esta página tiene asociada dos acciones: **index**, que tiene como respuesta el código HTML de la página, y **save**, que se encarga de guardar los datos del formulario que hay en la página. Ambos acciones han sido implementadas en el controlador generado, y se observa que en el controlador manual ha sido sobreescrita una de ellas, save. El resultado es que si se invoca la acción index se llamará al método generado, mientras que si se invoca la acción save se llamará al método del controlador manual. En el redirect al final del save manual, se invoca al método index generado al no existir en el controlador manual.


h3. Controladores en las páginas

Como ya se ha comentado, para cada página existen dos controladores: el generado y el manual. El controlador generado se escribe en el paquete **controllers.gen** mientras que el manual se sitúa en el paquete **controllers**. Así, una página que se llame Solicitante tendrá los siguientes controladores: controllers.gen.SolicitanteControllerGen controllers.SolicitanteController.

Con el controlador generado se incluyen una serie de métodos que se detallan a continuación: 

* **Index** - Este método es el que se llama al mostrar la página, es el encargado de cargar las entidades que va a utilizar la página (por ejemplo, la solicitud a partir de un ID) y renderizar la plantilla correspondiente para retornar el código html que compone la página.

bc. public static void index(Long idSolicitud){
   Solicitud solicitud = getSolicitud(idSolicitud);
   renderTemplate( "gen/Solicitante/Solicitante.html" , solicitud);
}

* **Save** - Es el encargado de guardar los datos introducidos en el formulario dentro de la entidad correspondientes. En primer lugar este método hace una llamada a checkAutenticity para comprobar que se accede con un usuario autentificado, luego se comprueba si este usuario tiene permisos para realizar esta acción, si los permisos son los correctos se obtiene la entidad de la base de datos, se validan los datos del formulario y se guardan guarda la entidad con los datos actualizados. Si todo el proceso transcurre correctamente se envía un mensaje de confirmación (de error en caso contrario). Por último se redirecciona al método index

bc. public static void save(Long idSolicitud, Solicitud solicitud){
   checkAuthenticity();
   if (permisosave("update") || permisosave("create")) {
      Solicitud dbsolicitud = getSolicitud(idSolicitud);
      saveValidateCopy(dbsolicitud, solicitud);
      if(!validation.hasErrors()){
         dbsolicitud.save(); Logger.info("Guardando solicitud " + dbsolicitud.id);
      }
   }
   else {
      Messages.fatal("No tiene permisos suficientes para realizar esta acción");
   }
   saveRender(idSolicitud);
}

* **Métodos de tabla** - Si la página contiene tablas se creara, para cada una de las tablas un método en el controlador encargado de devolver las filas en un JSON. Este método busca en base de datos la lista de instancias de la entidad a la que hace referencia la tabla, se filtran los resultados utilizando los permisos que se asignaron a la tabla y selecciona los datos que se van a enviar (atendiendo a las columnas de la tabla), por último se realizan las tranformaciones necesarias (por ejemplo para el formato de las fechas) y se renderiza como JSON. 

bc. public static void tablasubPublicas(Long idSolicitud){
   ...
   List rows = SubvencionPublica.find("select subvencionPublica ...", idSolicitud ).fetch();
   List rowsFiltered = rows; //Tabla sin permisos, no filtra los resultados
   TableRenderResponse response = new TableRenderResponse(rowsFiltered);
   renderJSON(response.toJSON("entidad", "objeto", "situacion", "importe", "id"));
}

Existen otros métodos que son llamados desde alguno de los métodos anteriores, como pueden ser *permisoSave*, *saveValidateCopy*, ..., estos métodos se utilizan como utilidades (no como acciones) por lo que al llamarlos desde otro metodo no producen una redirección (Esto se indica con la anotación @Util).

bc. @Util
protected static Solicitud getSolicitud(Long idSolicitud){
   Solicitud solicitud = null;
   if(idSolicitud == null){
      Messages.fatal("Falta parámetro idSolicitud");
   }else{
      solicitud = Solicitud.findById(idSolicitud);
      if(solicitud == null){
         Messages.fatal("Error al recuperar Solicitud");
      }
   }
   return solicitud;
}

Se puede ver la llamada a este método tanto en index como en save.

h3. Controladores en PopUp

Al igual que en las páginas, existen dos controladores: el generado y el manual. El controlador generado se escribe en el paquete **controllers.popups.gen** mientras que el manual se sitúa en el paquete **controllers.popups**. Para un popup que se llame PopupSubvenciones tendrá los siguientes controladores: controllers.popup.gen.PopupSubvencionesControllerGen controllers.PopupSubvencionesController.

Con el controlador generado se incluyen una serie de métodos que se detallan a continuación: 

* **Abrir** - Similar el método index en las páginas, carga la entidad (o la crea si la acción del popup es crear), comprueba si el usuario tiene permisos para realizar esta acción y renderiza la plantilla.

bc. public static void abrir(String accion,Long idSubvencionPublica,Long idSolicitud){
   SubvencionPublica subvencionPublica;
   if(accion.equals("crear")){
      subvencionPublica = new SubvencionPublica();
   }else{
      subvencionPublica = getSubvencionPublica(idSolicitud, idSubvencionPublica);
   }
   if (!permiso(accion)){
      Messages.fatal("No tiene permisos suficientes para realizar esta acción");
   }
   renderTemplate("gen/popups/PopUpSubPublicas.html",accion,idSubvencionPublica,subvencionPublica,idSolicitud);
}

* **Crear** - Guarda los datos del formulario en una nueva instancia de la entidad. Similar al método save de la página. Comprueba si el usuario esta autentificado, comprueba si tiene permisos para crear la entidad, crea la nueva entidad, valida el formulario y si no ha errores guarda la entidad en base de datos y envía un JSON informando de que el proceso se a realizado correctamente.

bc. public static void crear(Long idSolicitud,SubvencionPublica subvencionPublica){
   checkAuthenticity();
   if(!permiso("create")){
      Messages.error("No tiene permisos suficientes para realizar la acción");
   }
   SubvencionPublica dbsubvencionPublica = new SubvencionPublica();
   Solicitud dbsolicitud = null;
   dbsolicitud = getSolicitud(idSolicitud);
   PopUpSubPublicasValidateCopy(dbsubvencionPublica, subvencionPublica);;
   dbsubvencionPublica.save();
   dbsolicitud.subvenciones.subvencionesPublicas.add(dbsubvencionPublica);
   dbsolicitud.save();
   if(!Messages.hasErrors()){
      renderJSON(utils.RestResponse.ok("Registro creado correctamente"));
   }else{
      Messages.keep();
      abrir("crear",null,idSolicitud);
   }
}

* **editar** - Similar al método Crear, el proceso es el mismo pero en este caso no se crea una nueva instancia de la entidad, sino que se busca en base de datos.
* **borrar** - Similar a editar, solo que en este caso no se realiza una validación del formulario y al finalizar el proceso no se guarda la entidad en base de datos sino que se elimina.

Al igual que en las páginas existen otros métodos que se utilizan como utilidades (@Util).	

h3. Validación 

Para la validación de los formularios se utiliza la clase "CustomValidation" que en encuentra el paquete validation del modulo FAP. Esta clase se basa en los siguientes métodos para realizar las validaciones: 

* **valid** - Dado el campo de la entidad y los valores introducidos en el formulario para esa entidad se comprueba si los valores tienen un formato valido, por ejemplo que el email tenga el formato correcto, o que el NIP sea un NIP valido. 

bc. CustomValidation.valid("solicitud.solicitante", solicitud.solicitante);

* **required** - Se utiliza en los campos requeridos, comprueba si el usuario asigno un valor para un elemento en concreto del formulario. 

bc. CustomValidation.required("solicitud.solicitante.email", solicitud.solicitante.email);

* **validValueFromTable** - Se utiliza en los combos y comprueba si el valor que se asigno en el formulario se corresponde con un valor de la lista de 
valores disponibles.

bc. CustomValidation.validValueFromTable("solicitud.solicitante.domicilio.municipio", solicitud.solicitante.domicilio.municipio);

* **ClearValidate** - Limpia el buffer de validaciones, este buffer se utiliza para evitar que se evalúe más de una vez cada entidad en una misma petición. 
