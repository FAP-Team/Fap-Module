/*
 * generated by Xtext
 */
package es.fap.simpleled.ui.contentassist;

import java.util.HashSet;
import java.util.Set;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.jface.text.BadLocationException;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.jface.viewers.StyledString.Styler;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.TextStyle;
import org.eclipse.swt.widgets.Display;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import com.google.inject.Inject;

import es.fap.simpleled.led.*;
import es.fap.simpleled.led.util.LedCampoUtils;
import es.fap.simpleled.led.util.LedEntidadUtils;
import es.fap.simpleled.validation.*;

/**
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on
 * how to customize content assistant
 */
public class LedProposalProvider extends AbstractLedProposalProvider {

//	@Inject
//	IResourceDescriptions descriptions;
	
	@Inject
	IScopeProvider scopeProvider;

	public int getCurrentLine(ContentAssistContext context){
		try {
			return context.getViewer().getDocument().getLineOfOffset(context.getOffset()) + 1;
		} catch (BadLocationException e) {
			return 0;
		}
	}
	
	@Override
	public void completeKeyword(Keyword keyword, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		String value = keyword.getValue();
		if (value.equals(".") || value.equals(context.getPrefix())){
			return;
		}
		char first = value.charAt(0);
		if (value.equals("}") || (Character.isLetter(first) && first == Character.toUpperCase(first))){
			if (getCurrentLine(context) == context.getLastCompleteNode().getStartLine()){
				return;
			}
		}
		super.completeKeyword(keyword, context, acceptor);
	}
	
	@Override
	public void completeCampo_Entidad(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		Campo campo = LedCampoUtils.getCampo(model);
		LedElementValidator validator = LedCampoUtils.getElementValidator(campo);
		if (validator != null) {
			for (String proposal: validator.completeEntidades(getEntidades(campo))) {
				acceptor.accept(createCompletionProposal(proposal.split("-")[0].trim(), styledProposal(proposal), null, context));
			}
		}
		else{
			super.completeCampo_Entidad(model, assignment, context, acceptor);
		}
	}
	
	@Override
	public void completeCampoAtributos_Atributo(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor){
		CampoAtributos atributos = (CampoAtributos) model;
		Campo campo = LedCampoUtils.getCampoContainer(atributos);
		Entity entidad = null;
		if (atributos.eContainer() instanceof Campo){
			entidad = ((Campo) atributos.eContainer()).getEntidad();
		}
		else{
			Attribute attr = ((CampoAtributos)atributos.eContainer()).getAtributo();
			if (LedEntidadUtils.xToOne(attr)){
				entidad = attr.getType().getCompound().getEntidad();
			}
		}
		if (entidad == null){
			return;
		}
		LedElementValidator validator = LedCampoUtils.getElementValidator(campo);
		if (validator != null){
			for (String proposal: validator.completeEntidad("", entidad)) {
				acceptor.accept(createCompletionProposal(proposal.split("-")[0].trim(), styledProposal(proposal), null, context));
			}
		}
		else{
			super.completeCampoAtributos_Atributo(atributos, assignment, context, acceptor);
		}
	}

	public Set<Entity> getEntidades(Campo campo) {
		Set<Entity> entidades = new HashSet<Entity>();
		EObject container = LedCampoUtils.getElementosContainer(campo);
		if (container instanceof Tabla){
			entidades.add(LedCampoUtils.getUltimaEntidad(((Tabla)container).getCampo()));
			return entidades;
		}
		if (container instanceof Popup){
			Popup popup = (Popup)container;
			if (popup.getCampo() != null){
				entidades.add(LedCampoUtils.getUltimaEntidad(popup.getCampo()));
				return entidades;
			}
		}
//		if (container instanceof Form){
//			entidades.add(getLastEntity(((Popup)container).getCampo()));
//			return entidades;
//		}
//		Set<Entity> referenciadas = new HashSet<Entity>();
		Entity solicitud = null;
		Entity solicitudGenerica = null;
		
//		for (IEObjectDescription desc : descriptions.getExportedObjectsByType(LedPackage.Literals.ENTITY)) {
		for (IEObjectDescription desc : scopeProvider.getScope(campo, LedPackage.Literals.CAMPO__ENTIDAD).getAllElements()) {
			Entity entidad = (Entity) desc.getEObjectOrProxy();
			if (entidad.eIsProxy()) {
				entidad = (Entity) EcoreUtil.resolve(entidad, campo.eResource());
			}
//			for (Attribute attr: getAllDirectAttributes(entidad)){
//				Entity ref = getEntity(attr);
//				if (ref != null){
//					referenciadas.add(ref);
//				}
//			}
			if (entidad.getName().equals("SolicitudGenerica")) {
				solicitudGenerica = entidad;
			} else {
				entidades.add(entidad);
				if (entidad.getName().equals("Solicitud")) {
					solicitud = entidad;
				}
			}
		}
		if (solicitud == null && solicitudGenerica != null) {
			entidades.add(solicitudGenerica);
		}
//		entidades.removeAll(referenciadas);
		return entidades;
	}
	
	private static Color color = new Color(Display.getCurrent(), 127, 127, 127);
	
	private static Styler styler = new Styler() {
		
		@Override
		public void applyStyles(TextStyle arg0) {
			arg0.foreground = color;
		}
	};
	
	private StyledString styledProposal(String proposal){
		StyledString styled = new StyledString(proposal);
		int index = proposal.indexOf("-");
		styled.setStyle(index, proposal.length() - index, styler);
		return styled;
	}
	
}
