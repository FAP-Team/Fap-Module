/*
 * generated by Xtext
 */
package es.fap.simpleled.scoping;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

import es.fap.simpleled.led.Attribute;
import es.fap.simpleled.led.Campo;
import es.fap.simpleled.led.CampoAtributos;
import es.fap.simpleled.led.Entity;
import es.fap.simpleled.led.util.LedEntidadUtils;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */

public class LedScopeProvider extends AbstractDeclarativeScopeProvider {
	
	public IScope scope_CampoAtributos_atributo(CampoAtributos atributos, EReference ref) {
		Entity entidad = null;
		if (atributos.eContainer() instanceof Campo){
			entidad = ((Campo) atributos.eContainer()).getEntidad();
		}
		else{
			Attribute attr = ((CampoAtributos)atributos.eContainer()).getAtributo();
			if (LedEntidadUtils.xToOne(attr)){
				entidad = attr.getType().getCompound().getEntidad();
			}
		}
		return Scopes.scopeFor(getAllDirectAttributesAndAddId(entidad));
	}
	
	public static List<Attribute> getAllDirectAttributesAndAddId(Entity entidad){
		List<Attribute> attrs = new ArrayList<Attribute>();
		while (entidad != null){
			LedEntidadUtils.addId(entidad);
			for (Attribute attr: entidad.getAttributes()){
				attrs.add(attr);
			}
			entidad = entidad.getExtends();
		}
		return attrs;
	}
	
}
