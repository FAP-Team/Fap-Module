/*
 * generated by Xtext
 */
package es.fap.simpleled.scoping;

import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

import com.google.inject.Inject;

import es.fap.simpleled.led.Attribute;
import es.fap.simpleled.led.Campo;
import es.fap.simpleled.led.CampoAtributos;
import es.fap.simpleled.led.CampoPermiso;
import es.fap.simpleled.led.CampoPermisoAtributos;
import es.fap.simpleled.led.Combo;
import es.fap.simpleled.led.Entity;
import es.fap.simpleled.led.LedPackage;
import es.fap.simpleled.led.Pagina;
import es.fap.simpleled.led.Popup;
import es.fap.simpleled.led.ListaAtributos;
import es.fap.simpleled.led.Tabla;
import es.fap.simpleled.led.util.LedCampoUtils;
import es.fap.simpleled.led.util.LedEntidadUtils;
import es.fap.simpleled.led.util.ModelUtils;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class LedScopeProvider extends AbstractDeclarativeScopeProvider {
	
	@Inject
	private LedPackage ledPackage;
	
	public IScope scope_Pagina(EObject ctx, EReference ref){
		List<Pagina> paginas = ModelUtils.<Pagina>getVisibleNodes(ledPackage.getPagina(), ctx.eResource());
		return Scopes.scopeFor(paginas);
	}
	
	public IScope scope_Popup(EObject ctx, EReference ref){
		List<Popup> popups = ModelUtils.<Popup>getVisibleNodes(ledPackage.getPopup(), ctx.eResource());
		return Scopes.scopeFor(popups);
	}
	
	public IScope scope_CampoAtributos_atributo(CampoAtributos atributos, EReference ref) {
		Entity entidad = null;
		if (atributos.eContainer() instanceof Campo){
			entidad = ((Campo) atributos.eContainer()).getEntidad();
		}
		else{
			Attribute attr = ((CampoAtributos)atributos.eContainer()).getAtributo();
			boolean esPagina = LedCampoUtils.getCampoContainer(atributos).eContainer() instanceof Pagina;
			boolean esPopup = LedCampoUtils.getCampoContainer(atributos).eContainer() instanceof Popup;
			if (LedEntidadUtils.xToOne(attr) || ((esPagina || esPopup) && LedEntidadUtils.isReferencia(attr))){
				entidad = LedEntidadUtils.getEntidad(attr);
			}
		}
		return Scopes.scopeFor(LedEntidadUtils.getAllDirectAttributes(entidad));
	}
	
	public IScope scope_ListaAtributos_atributos(ListaAtributos list, EReference ref){
		Entity entidad = null;
		Tabla tablaPadre = (Tabla)list.eContainer();
		entidad = LedCampoUtils.getUltimaEntidad(tablaPadre.getCampo());
		return Scopes.scopeFor(LedEntidadUtils.getAllDirectAttributes(entidad));
	}
	
	public IScope scope_CampoPermisoAtributos_atributo(CampoPermisoAtributos atributos, EReference ref) {
		Entity entidad = null;
		if (atributos.eContainer() instanceof CampoPermiso){
			CampoPermiso permiso = (CampoPermiso) atributos.eContainer();
			if (permiso.getVariable() != null){
				entidad = permiso.getVariable().getTipo();
			}
			else if (permiso.isAgente()){
				List<Entity> entidades = ModelUtils.<Entity>getVisibleNodes(ledPackage.getEntity(), "Agente", atributos.eResource());
				if (entidades.size() > 0)
					entidad = entidades.get(0);
			}
		}
		else{
			Attribute attr = ((CampoPermisoAtributos)atributos.eContainer()).getAtributo();
			if (LedEntidadUtils.xToOne(attr)){
				entidad = LedEntidadUtils.getEntidad(attr);
			}
		}
		return Scopes.scopeFor(LedEntidadUtils.getAllDirectAttributes(entidad));
	}
	
	public IScope scope_Combo_comboTexto(Combo combo, EReference ref) {
		Attribute attr = LedCampoUtils.getUltimoAtributo(combo.getCampo());
		Entity entidad = null;
		if (LedEntidadUtils.ManyToX(attr)){
			entidad = LedEntidadUtils.getEntidad(attr);
		}
		return Scopes.scopeFor(LedEntidadUtils.getAllDirectAttributes(entidad));
	}
	
	public IScope scope_Combo_comboValor(Combo combo, EReference ref) {
		return scope_Combo_comboTexto(combo, ref);
	}
}
