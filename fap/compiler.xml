<project name="fap-generator" default="compiler">

	<property environment="env" />

	<!-- Configurado para utilizar rutas absolutas en base a la variable de entorno fapsdk -->
	<property name="fapsdk" value="${env.FAPSDK}" />
	<property name="fap" value="${fapsdk}/fap" />
	
	<property name="compiler.src.dir" value="${fap}/compiler/src" />
	<property name="documentationHTML" value="${fap}/compiler/gendocumentation" />
	<property name="compiler.compiled" value="${fap}/compiler/compiled" />
	
	<property name="grammar.dir" value="${compiler.src.dir}/es.fap.simpleled" />
	<property name="generator.dir" value="${compiler.src.dir}/es.fap.simpleled.generator" />
	<property name="ui.dir" value="${compiler.src.dir}/es.fap.simpleled.ui" />
	
	<property name="dependencies.yml" value="${fap}/conf/dependencies.yml" />
	<property name="plugins.dir" value="${fap}/plugins" />
	
	<!-- FTP Tasks properties -->
	<condition property="ftp.server" value="${ftpservernightly}" else="fap-devel.etsii.ull.es">
		<isset property="ftpservernightly" />
	</condition>
	<condition property="ftp.fap.dir" value="${ftpdirnightly}" else="/public/fap-sdk2/">
		<isset property="ftpdirnightly" />
	</condition>
	<condition property="ftp.user" value="${ftpusernightly}" else="undefined">
		<isset property="ftpusernightly" />
	</condition>
	<condition property="ftp.pass" value="${ftppassnightly}" else="undefined">
		<isset property="ftppassnightly" />
	</condition>
	<condition property="zip.dir" value="dist-nightly" else="dist">
		<isset property="versionnightly" />
	</condition>
	<!-- FTP Tasks properties -->

	<!-- SVN and SVN-ANT Tasks properties -->
	<property name="svn.module.base.url" value="http://banot.etsii.ull.es/subversion/faparte/play-module/trunk/fap/" />
	<property name="svn.module.tag.url" value="http://banot.etsii.ull.es/subversion/faparte/play-module/tags/" />
	<property name="svn.compiler.base.url" value="http://banot.etsii.ull.es/subversion/faparte/play-compiler/trunk/compiler/" />
	<property name="svn.compiler.tag.url" value="http://banot.etsii.ull.es/subversion/faparte/play-compiler/tags/" />
	<!--property name="svnant.lib.dir" location="${env.SVNANT_HOME}/lib"/-->
	<property name="svnant.lib.dir" location="compiler/lib" />
	<property name="svnant.javahl" value="false" />
	<property name="svnant.svnkit" value="true" />
	<!-- SVN and SVN-ANT Tasks properties -->

	<!-- Groovy properties -->
	<!--property name="groovy.lib.dir" location="${env.GROOVY_HOME}/lib"/-->
	<property name="groovy.lib.dir" location="compiler/lib" />
	<!-- Groovy properties -->

	
	
	
	
	<path id="svnant.classpath">
		<fileset dir="${svnant.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="groovy.classpath">
		<fileset dir="${groovy.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpathref="groovy.classpath" />


	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="svnant.classpath" />


	<!-- first create our properties -->
	<condition property="isUnix">
		<or>
			<os family="mac" />
			<os family="unix" />
		</or>
	</condition>

	<condition property="isWindows">
		<os family="windows" />
	</condition>

	<target name="get-version"
		description="Establece la versión del módulo en la variable \'version\' y la muestra">
		<groovy>
			File file = new File(properties["dependencies.yml"])
			file.eachLine { line -> 
				def m = line =~ /^.*self:.*play.+->.+fap\s+([0-9]+(\.[0-9]+)*(RC[0-9]+)?)$/
				if (m.getCount()){
					properties["version"] = m[0][1]
				}
			}
	    </groovy>
		<condition property="version.set" value="nb-${versionnightly}" else="${version}">
			<isset property="versionnightly" />
		</condition>
		<echo message="Version del modulo = ${version.set}" />
		<echo message="Directorio del ftp = ${ftp.fap.dir}" />
		<echo message="Server del ftp = ${ftp.server}" />
		<echo message="User del ftp = ${ftp.user}" />
		<echo message="Pass del ftp = ${ftp.pass}" />
	</target>



	<target name="dist" depends="get-version" description="Crea el fichero .zip del módulo fap">
		<echo message="Version del modulo = ${version.set}" />

		<antcall target="compiler" />

		<delete dir="dist" />
		<mkdir dir="dist" />
		<delete dir="dist-nightly" />
		<mkdir dir="dist-nightly" />

		<!-- Eliminada antcall target="build-plugins" /-->
		<antcall target="generate-module" />
		<antcall target="build-module-unix" />
		<antcall target="build-module-windows" />
		<antcall target="delete-src-from-zip" />

		<!--
		<antcall target="ftp-upload"/>
		<antcall target="ftp-upload-doc"/>
		<antcall target="svn-tag"/>
		-->
	</target>

	<!-- Se generan las clases del módulo. Por ahora se necesita tener python instalado
	y en el PATH del sistema, para no incluir más librerías-->
	<target name="generate-module" description="Genera el código del modulo FAP a partir de los ficheros .fap del mismo">
		<exec executable="python">
			<arg line='generate.py' />
		</exec>
	</target>
	
	<target name="generate-docHTML" description="Genera las clases necesarias para despues generar la documentacion HTML">
		<ant target="compile" antfile="${documentationHTML}/build.xml" />
	</target>

	<target name="compiler">
		<delete dir="${compiler.compiled}" />
		<mkdir dir="${compiler.compiled}" />
		<ant target="dist" antfile="compiler.xml" dir="${grammar.dir}" />
		<ant target="dist" antfile="compiler.xml" dir="${generator.dir}" />
		<ant target="dist" antfile="compiler.xml" dir="${ui.dir}" />
		
		<antcall target="copy-generated" />
		<antcall target="generate-docHTML" />
	</target>
	
	<target name="copy-generated">
		<copy todir="${compiler.compiled}" overwrite="true">
		 	<fileset dir="${grammar.dir}/dist">
		 		<include name="*.jar"/>
		 	</fileset>
		 	<fileset dir="${generator.dir}/dist">
		 		<include name="*.jar"/>
		 	</fileset>
		</copy>	
		
		<copy todir="${plugins.dir}" overwrite="true">
		 	<fileset dir="${grammar.dir}/dist">
		 		<include name="*.jar"/>
		 	</fileset>
		 	<fileset dir="${ui.dir}/dist">
		 		<include name="*.jar"/>
		 	</fileset>
		</copy>	
	</target>

	<!-- Copia los plugins a la carpeta de eclipse -->
	<target name="plugins" depends="compiler">
		<property environment="env" />
		<property name="route" value="${env.ECLIPSE_HOME}/dropins" />
		<echo message="Instalando plugins en ${route}"/>
		<copy todir="${route}" overwrite="true">
			<fileset dir="${plugins.dir}">
				<include name="*.jar"/>
			</fileset>
		</copy>
		<echo message="Reinicia eclipse para que los cambios tenga efecto"/>
	</target>

	<target name="build-module-unix" if="isUnix">
		<condition property="play.exe" value="${playexe}" else="play">
			<isset property="playexe" />
		</condition>
		<exec executable="${play.exe}">
			<arg value="build-module" />
			<arg value="--require=1.2.6" />
		</exec>
	</target>


	<target name="build-module-windows" if="isWindows">
		<exec executable="play.bat">
			<arg value="build-module" />
			<arg value="--require=1.2.6" />
		</exec>
	</target>

	<!-- Elimina la carperta de fuentes "src-compiler" del módulo FAP -->
	<target name="delete-src-from-zip" depends="get-version" description="Elimina la carpeta de fuentes src-compiler del módulo FAP (no son necesarias en el .zip)">
		<delete dir="extraer" />
		<!--mkdir dir="extraer" /-->
		<unzip src="dist/fap-${version}.zip" dest="extraer" />
		<delete dir="extraer/compiler/src" />
		<delete dir="dist-nightly" />
		<mkdir dir="dist-nightly" />
		<zip basedir="extraer" destfile="${zip.dir}/fap-${version.set}.zip" />
		<echo message="Modulo zip creado:  ${zip.dir}/fap-${version.set}.zip" />
		<delete dir="extraer" />
	</target>
	
	<target name="ftp-upload-doc" depends="ftp-upload" description="Sube el la documentación y el módulo al ftp">
		<copy todir="documentation/javadoc">
 			<fileset dir="javadoc"/>
		</copy>
		
		<ftp action="mkdir" server="${ftp.server}" userid="${ftp.user}" password="${ftp.pass}" remotedir="${ftp.fap.dir}${version}/documentation" />

		<ftp server="${ftp.server}" remotedir="${ftp.fap.dir}${version}/documentation/" userid="${ftp.user}" password="${ftp.pass}">
			<fileset dir="documentation">
				<include name="**/*.png" />
				<include name="**/*.textile" />
				<include name="**/*.html" />
			</fileset>
		</ftp>
	</target>

	<target name="ftp-upload" depends="get-version" description="Sube el módulo al ftp">
		<echo message="${zip.dir}    -    ${ftp.fap.dir}      -  ${zip.dir}/fap-${version.set}.zip" />
		<ftp action="mkdir" server="${ftp.server}" userid="${ftp.user}" password="${ftp.pass}" remotedir="${ftp.fap.dir}${version.set}" />

		<ftp server="${ftp.server}" remotedir="${ftp.fap.dir}${version.set}/" userid="${ftp.user}" password="${ftp.pass}">
			<fileset file="${zip.dir}/fap-${version.set}.zip" />
		</ftp>
	</target>

	<!-- Deprecated!!!!!-->
	<!--target name="svn-tag">	
		 <svnSetting id="svnConfig" javahl="${svnant.javahl}" svnkit="${svnant.svnkit}"/> 
		 <svn refid="svnConfig" >
		 	<copy srcUrl="${svn.compiler.base.url}" destUrl="${svn.compiler.tag.url}release-${version}" message="Tagging the ${version} release"/>    
		 </svn>
		 <echo message="Creado tag del generador"/>
		 <svn refid="svnConfig">
		 	<copy srcUrl="${svn.module.base.url}" destUrl="${svn.module.tag.url}release-${version}" message="Tagging the ${version} release"/>    
		 </svn>		
		 <echo message="Creado tag del modulo"/>
	</target-->


	<!-- Git -->
	<macrodef name="git">
		<attribute name="command" />
		<attribute name="dir" default="" />
		<element name="args" optional="true" />
		<sequential>
			<echo message="git @{command}" />
			<exec executable="git" dir="@{dir}">
				<arg value="@{command}" />
				<args />
			</exec>
		</sequential>
	</macrodef>

	<target name="git-status">
		<git command="status" dir="../"/>
	</target>

	<!-- Crea un TAG llamado v${version} con el HEAD que está en el repositorio Git -->
	<target name="git-create-tag" depends="get-version">
		<!-- Lo dejaremos igual que nuestro último commit -->
		<!--git command="stash" dir="../"/-->
		<!-- Obtenemos los ultimos cambios del repositorio -->
		<!--git command="pull" dir="../"/-->
		<!-- Creamos el tag con la version actual -->
		<git command="tag" dir="../">
			<args>
				<arg value="-a v${version} -m 'Release v${version}'" />
			</args>
		</git>
		<git command="push" args="--tags" dir="../"/>
		<echo message="Creado el tag v${version}" />
		<!-- Volvemos al estado del principio -->
		<!--git command="stash" args="apply" dir=".."/-->
	</target>

</project>



