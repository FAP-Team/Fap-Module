h3. Controladores en PopUp

Al igual que en las páginas, existen dos controladores: el generado y el manual. El controlador generado se escribe en el paquete **controllers.popups.gen** mientras que el manual se sitúa en el paquete **controllers.popups**. Para un popup que se llame PopupSubvenciones tendrá los siguientes controladores: controllers.popup.gen.PopupSubvencionesControllerGen controllers.PopupSubvencionesController.

Con el controlador generado se incluyen una serie de métodos que se detallan a continuación: 

* **Abrir** - Similar el método index en las páginas, carga la entidad (o la crea si la acción del popup es crear), comprueba si el usuario tiene permisos para realizar esta acción y renderiza la plantilla.

bc. public static void abrir(String accion,Long idSubvencionPublica,Long idSolicitud){
   SubvencionPublica subvencionPublica;
   if(accion.equals("crear")){
      subvencionPublica = new SubvencionPublica();
   }else{
      subvencionPublica = getSubvencionPublica(idSolicitud, idSubvencionPublica);
   }
   if (!permiso(accion)){
      Messages.fatal("No tiene permisos suficientes para realizar esta acción");
   }
   renderTemplate("gen/popups/PopUpSubPublicas.html",accion,idSubvencionPublica,subvencionPublica,idSolicitud);
}

* **Crear** - Guarda los datos del formulario en una nueva instancia de la entidad. Similar al método save de la página. Comprueba si el usuario esta autentificado, comprueba si tiene permisos para crear la entidad, crea la nueva entidad, valida el formulario y si no ha errores guarda la entidad en base de datos y envía un JSON informando de que el proceso se a realizado correctamente.

bc. public static void crear(Long idSolicitud,SubvencionPublica subvencionPublica){
   checkAuthenticity();
   if(!permiso("create")){
      Messages.error("No tiene permisos suficientes para realizar la acción");
   }
   SubvencionPublica dbsubvencionPublica = new SubvencionPublica();
   Solicitud dbsolicitud = null;
   dbsolicitud = getSolicitud(idSolicitud);
   PopUpSubPublicasValidateCopy(dbsubvencionPublica, subvencionPublica);;
   dbsubvencionPublica.save();
   dbsolicitud.subvenciones.subvencionesPublicas.add(dbsubvencionPublica);
   dbsolicitud.save();
   if(!Messages.hasErrors()){
      renderJSON(utils.RestResponse.ok("Registro creado correctamente"));
   }else{
      Messages.keep();
      abrir("crear",null,idSolicitud);
   }
}

* **editar** - Similar al método Crear, el proceso es el mismo pero en este caso no se crea una nueva instancia de la entidad, sino que se busca en base de datos.
* **borrar** - Similar a editar, solo que en este caso no se realiza una validación del formulario y al finalizar el proceso no se guarda la entidad en base de datos sino que se elimina.

Al igual que en las páginas existen otros métodos que se utilizan como utilidades (@Util).	

h3. Validación 

Para la validación de los formularios se utiliza la clase "CustomValidation" que en encuentra el paquete validation del modulo FAP. Esta clase se basa en los siguientes métodos para realizar las validaciones: 

* **valid** - Dado el campo de la entidad y los valores introducidos en el formulario para esa entidad se comprueba si los valores tienen un formato valido, por ejemplo que el email tenga el formato correcto, o que el NIP sea un NIP valido. 

bc. CustomValidation.valid("solicitud.solicitante", solicitud.solicitante);

* **required** - Se utiliza en los campos requeridos, comprueba si el usuario asigno un valor para un elemento en concreto del formulario. 

bc. CustomValidation.required("solicitud.solicitante.email", solicitud.solicitante.email);

* **validValueFromTable** - Se utiliza en los combos y comprueba si el valor que se asigno en el formulario se corresponde con un valor de la lista de 
valores disponibles.

bc. CustomValidation.validValueFromTable("solicitud.solicitante.domicilio.municipio", solicitud.solicitante.domicilio.municipio);

* **ClearValidate** - Limpia el buffer de validaciones, este buffer se utiliza para evitar que se evalúe más de una vez cada entidad en una misma petición. 
