h1. Controladores en FAP (PopUps)

Al igual que en las páginas, existen dos controladores: el generado y el manual. El controlador generado se escribe en el paquete **controllers.popups.gen** mientras que el manual se sitúa en el paquete **controllers.popups**. Para un popup que se llame PopupNombre tendrá los siguientes controladores: controllers.popup.gen.PopupNombreControllerGen controllers.PopupNombreController.

h2. Algunos métodos que se generan

Con el controlador generado se incluyen una serie de métodos que se detallan a continuación: 

* **index** - Homónimo del método index de las páginas, carga la entidad (o la crea si la acción del popup es crear), comprueba si el usuario tiene permisos para realizar esta acción y renderiza la plantilla.

bc. public static void index(String accion, Long idSolicitud, Long idTablaDeNombres, String urlRedirigir) {
	if (accion == null)
		accion = getAccion();
	if (!permiso(accion)) {
		Messages.fatal("No tiene suficientes privilegios para acceder a esta solicitud");
		renderTemplate("gen/popups/popupNombre.html");
	}
	Solicitud solicitud = popupNombreController.getSolicitud(idSolicitud);
	TablaDeNombres tablaDeNombres = null;
	if ("crear".equals(accion)) {
		tablaDeNombres = popupNombreController.getTablaDeNombres();
		if (properties.FapProperties.getBoolean("fap.entidades.guardar.antes")) {
			tablaDeNombres.save();
			idTablaDeNombres = tablaDeNombres.id;
			solicitud.tablaDeNombres.add(tablaDeNombres);
			solicitud.save();
			accion = "editar";
		}
		String variablesRedirigir = "";
		variablesRedirigir += "&idSolicitud=" + idSolicitud;
		urlRedirigir += variablesRedirigir;
	} else if (!"borrado".equals(accion))
		tablaDeNombres = popupNombreController.getTablaDeNombres(idSolicitud, idTablaDeNombres);
	log.info("Visitando página: " + "gen/popups/popupNombre.html");
	renderTemplate("gen/popups/popupNombre.html", accion, idSolicitud, idTablaDeNombres, solicitud, tablaDeNombres, urlRedirigir);
}

* **crear** - Es el método que se llama cuando se Guarda en un PopUp que ha sido abierto desde una tabla con el botón Nuevo. Dependiendo de si ya existe la instancia en Base de Datos, pues llama al editar (simplemente) o crea la Lógica (llamando al metodo _crearLogica_ explicado a continuación) necesaria para crear la nueva instancia en base de datos y poder almacenar los datos introducidos por el usuario en el formulario de dicho PopUp.

bc. public static void crear(Long idSolicitud, Long idTablaDeNombres, TablaDeNombres tablaDeNombres) {
	if (idTablaDeNombres != null)
		popupNombreController.editar(idSolicitud, idTablaDeNombres, tablaDeNombres);
	else {
		idTablaDeNombres = popupNombreController.crearLogica(idSolicitud, tablaDeNombres);
		popupNombreController.crearRender(idSolicitud, idTablaDeNombres);
	}
}

* *crearLogica* - Recupera el objeto que va a utilizar para almacenar en Base de Datos, de manera que con la llamada al _getTablaDeNombres_ al no pasarle ningún id, lo que hará será devolver un nuevo objeto, es decir un _new TablaDeNombres()_. Posteriormente, guarda los datos del formulario en esa nueva instancia de la entidad. El algoritmo completo es: Comprueba si el usuario esta autentificado, comprueba si tiene permisos para crear la entidad, crea la nueva entidad, valida el formulario y si no hay errores guarda la entidad en base de datos y lo notifica renderizando un mensaje ok en el PopUp.

bc. @Util
public static Long crearLogica(Long idSolicitud, TablaDeNombres tablaDeNombres) 
	checkAuthenticity()
	if (!permiso("crear")) 
		Messages.error("No tiene suficientes privilegios para acceder a esta solicitud")
	TablaDeNombres dbTablaDeNombres = popupNombreController.getTablaDeNombres()
	Solicitud dbSolicitud = popupNombreController.getSolicitud(idSolicitud)
	popupNombreController.popupNombreBindReferences(tablaDeNombres)
	if (!Messages.hasErrors()) 
		popupNombreController.popupNombreValidateCopy("crear", dbTablaDeNombres, tablaDeNombres)
	if (!Messages.hasErrors()) 
		popupNombreController.crearValidateRules(dbTablaDeNombres, tablaDeNombres)
	Long idTablaDeNombres = null
	if (!Messages.hasErrors()) 
		dbTablaDeNombres.save()
		idTablaDeNombres = dbTablaDeNombres.id
		dbSolicitud.tablaDeNombres.add(dbTablaDeNombres)
		dbSolicitud.save()
		log.info("Acción Crear de página: " + "gen/popups/popupNombre.html" + " , intentada con éxito")
	} else 
		log.info("Acción Crear de página: " + "gen/popups/popupNombre.html" + " , intentada sin éxito (Problemas de Validación)");
	return idTablaDeNombres;
}

* **editar** - Es el método que se llama siempre que se Guarde un objeto con un ID conocido, es decir, siempre que Guardemos algo que no estemos creando.

bc. @Util
// Este @Util es necesario porque en determinadas circunstancias crear(..) llama a editar(..).
public static void editar(Long idSolicitud, Long idTablaDeNombres, TablaDeNombres tablaDeNombres) {
	checkAuthenticity();
	if (!permiso("editar")) {
		Messages.error("No tiene suficientes privilegios para acceder a esta solicitud");
	}
	TablaDeNombres dbTablaDeNombres = popupNombreController.getTablaDeNombres(idSolicitud, idTablaDeNombres);
	popupNombreController.popupNombreBindReferences(tablaDeNombres);
	if (!Messages.hasErrors()) {
		popupNombreController.popupNombreValidateCopy("editar", dbTablaDeNombres, tablaDeNombres);
	}
	if (!Messages.hasErrors()) {
		popupNombreController.editarValidateRules(dbTablaDeNombres, tablaDeNombres);
	}
	if (!Messages.hasErrors()) {
		dbTablaDeNombres.save();
		log.info("Acción Editar de página: " + "gen/popups/popupNombre.html" + " , intentada con éxito");
	} else
		log.info("Acción Editar de página: " + "gen/popups/popupNombre.html" + " , intentada sin éxito (Problemas de Validación)");
	popupNombreController.editarRender(idSolicitud, idTablaDeNombres);
}
	
* **borrar** - Similar a editar, solo que en este caso no se realiza una validación del formulario y al finalizar el proceso no se guarda la entidad en base de datos sino que se elimina. Este método sólo se genera cuando en la tabla en la que se referencia el PopUp, existe la acción Borrar..

Al igual que en las páginas existen otros métodos que se utilizan como utilidades (@Util).

h2. Validaciones en PopUps

Otra clase que se utiliza mucho en los controladores de Páginas y Popups es la que se encarga de validar que los datos introducidos por el usuario son datos válidos para almacenar en Base de Datos. (Comprobación de campos requeridos, de que (por ejemplo) el email tiene el formato adecuado, que los Doubles están correctamente expresados, etc.). Podemos ver algunas de las funciones de esta clase en el siguiente enlace: "validacion":validacion.
